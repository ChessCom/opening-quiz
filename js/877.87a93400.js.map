{"version":3,"file":"js/877.87a93400.js","mappings":"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","sources":["webpack://opening-quiz/../../src/chessboard/modes/model/extend-mode.ts","webpack://opening-quiz/../../src/chessboard/modes/model/create-mode.ts","webpack://opening-quiz/../../src/chessboard/modes/base/get-ids-to-delete.ts","webpack://opening-quiz/../../src/chessboard/model/game/is-node.ts","webpack://opening-quiz/../../src/chessboard/modes/exploring/config/types.ts","webpack://opening-quiz/../../src/chessboard/modes/exploring/api-overrides/move.ts","webpack://opening-quiz/../../src/chessboard/modes/exploring/plugin/index.ts","webpack://opening-quiz/../../src/chessboard/modes/exploring/base.ts","webpack://opening-quiz/../../src/chessboard/modes/exploring/index.ts"],"sourcesContent":["import type { API } from 'api/config/types';\nimport type { Modes } from 'modes/config/types';\n\n/**\n * Extend or override a mode's api.\n */\nexport function createExtendMode(mode: Modes.API.Base, api: API.ExtendedAPI) {\n  return function extendMode(extensions: Record<string, Function>) {\n    const destroyOverrides: (Function | undefined)[] = Object.entries(extensions).map(\n      ([key, fn]) => {\n        if (!fn || !mode.overridableMethods?.includes(key)) {\n          return;\n        }\n\n        const cachedMethod = mode[key];\n\n        mode[key] = fn(mode, api);\n\n        return function destroyOverride() {\n          mode[key] = cachedMethod;\n        };\n      },\n    );\n\n    return function destroyOverride() {\n      destroyOverrides.map((fn) => fn?.());\n    };\n  };\n}\n","import type { API } from 'chessboard/api/config/types';\nimport { Core } from 'chessboard/core/config/types';\nimport { createCoreEvent } from 'chessboard/core/model/create-core-event';\nimport type { Modes } from 'modes/config/types';\nimport { createExtendMode } from 'modes/model/extend-mode';\n\ntype Model<T extends Modes.Options.Initial.Custom> = Modes.Options.Initial.Model<T>;\n\n/**\n * Build a mode.\n */\nfunction buildMode<T extends Modes.Options.Initial.Custom>({\n  base,\n  initialOptions,\n}: {\n  base: Modes.CreateMode.Base<Modes.Options.Exposed.Model<T>>;\n  initialOptions: Model<T>;\n}): Modes.CreateMode.Builder<T> {\n  return function getBoundMode(api: API.ExtendedAPI): Modes.API.Extended<T> {\n    const options = Object.keys(initialOptions).reduce(\n      (acc, key: keyof Model<T>) => {\n        acc[key] = initialOptions[key].default;\n\n        return acc;\n      },\n      {} as Modes.Options.Exposed.Model<T>,\n    );\n\n    const modeAPI = base({ api, options });\n    const extendMode = createExtendMode(modeAPI, api);\n\n    return Object.assign(modeAPI, { extendMode, getOptions, setOption });\n\n    /**\n     * Get the mode options.\n     */\n    function getOptions(): Modes.Options.Exposed.Model<T> {\n      return options;\n    }\n\n    /**\n     * Set an option, if the mode allows setting that option.\n     */\n    function setOption(key: keyof Model<T>, value: boolean) {\n      if (!initialOptions[key]?.editable) {\n        warnOptionNotEditable(key);\n        return;\n      }\n\n      options[key] = value;\n\n      api.emit(\n        Core.OptionsEvents.UpdateMode,\n        createCoreEvent(Core.OptionsEvents.UpdateMode, { [key]: value }),\n      );\n    }\n  };\n}\n\n/**\n * Create a mode, returning the mode itself and a function that enables\n * re-instantiating the mode with new options.\n */\nexport function createModeFactory<T extends Modes.Options.Initial.Custom>(\n  base: Modes.CreateMode.Base<Modes.Options.Exposed.Model<T>>,\n  defaults: Model<T>,\n) {\n  return function createMode(\n    options: Partial<Modes.Options.Exposed.Model<T>> = {},\n  ): Modes.CreateMode.Builder<T> {\n    const initialOptions = Object.keys(options).reduce((acc, key: keyof Model<T>) => {\n      if (defaults[key]?.editable) {\n        Object.assign(acc, { [key]: { default: options[key], editable: true } });\n      } else {\n        warnOptionNotEditable(key);\n      }\n\n      return acc;\n    }, defaults);\n\n    return buildMode({\n      base,\n      initialOptions,\n    });\n  };\n}\n\n/**\n * Warn the developer that an option is not editable.\n */\nfunction warnOptionNotEditable<T>(key: keyof T) {\n  //@ts-ignore\n  console.warn(`${key} is not an editable option in this mode.`); // eslint-disable-line\n}\n","import { isNode } from 'model/game/is-node';\nimport type { Game } from 'chessboard/model/game/types';\nimport type JCE from '@chesscom/js-chess-engine';\n\n/**\n * Get the ids of the move immediately following the given node,\n * in order to delete it.\n */\nexport function getIdsToDelete(node: Game.Move.Model | JCE.Line | null): JCE.Node.Model['ids'] {\n  if (isNode(node)) {\n    return { line: node.ids.line, move: node.ids.move + 1 };\n  }\n\n  return { line: 0, move: 0 };\n}\n","import type { Game } from 'chessboard/model/game/types';\n\n/**\n * Determine if a given node is a node.\n */\nexport function isNode(\n  node: Game.Line | Game.Move.Node | Game.Move.Model | null,\n): node is Game.Move.Node {\n  return (<Game.Move.Node>node)?.ids !== undefined;\n}\n","export namespace ExploringMode {\n  export namespace Plugin {\n    export const Name = 'exploring';\n  }\n}\n","import type { API } from 'chessboard/api/config/types';\nimport { getIdsToDelete } from 'chessboard/modes/base/get-ids-to-delete';\n\n/**\n * Override the move function, handling a move on a previous node and\n * creating a variation or continuation as needed.\n */\nexport function createMove(context: API.Context) {\n  const { api } = context;\n  const originalMethod = api.move;\n\n  return function move(mv: API.Options.Move | string): API.Response {\n    if (api.isAtEndOfLine()) {\n      return originalMethod(mv);\n    }\n\n    const { line, move: moveNumber } = getIdsToDelete(api.getRelativeNode());\n\n    api.deletePosition(moveNumber, line);\n\n    return originalMethod(mv);\n  };\n}\n","import type { Plugins } from 'chessboard/core/plugins/config/types';\nimport { createMove } from 'chessboard/modes/exploring/api-overrides/move';\nimport { ExploringMode } from 'chessboard/modes/exploring/config/types';\n\n/**\n * Create a factory for the Explorer mode's plugin.\n */\nexport function createExploringModePlugin(): Plugins.Model {\n  return {\n    apiOverrides: {\n      move: createMove,\n    },\n    name: ExploringMode.Plugin.Name,\n  };\n}\n","import { createExploringModePlugin } from 'chessboard/modes/exploring/plugin';\nimport { Modes } from 'modes/config/types';\n\n/**\n * Create exploring mode.\n */\nexport function base(): Modes.API.Base {\n  return {\n    isAllowedToMove,\n    name: Modes.Types.Explorer,\n    plugins: [createExploringModePlugin()],\n  };\n\n  /**\n   * Can move for both sides.\n   */\n  function isAllowedToMove() {\n    return true;\n  }\n}\n","import { createModeFactory } from 'chessboard/modes/model/create-mode';\nimport { base } from 'chessboard/modes/exploring/base';\n\nexport const create = createModeFactory(base, {\n  canAddMovesToMainLine: { default: true, editable: false },\n  canInteractWithPieces: { default: true, editable: true },\n  canModifyExistingMovesOnMainLine: { default: true, editable: false },\n});\n"],"names":["createExtendMode","mode","api","extensions","destroyOverrides","Object","entries","map","key","fn","_a","overridableMethods","includes","cachedMethod","buildMode","base","initialOptions","options","keys","reduce","acc","default","modeAPI","extendMode","assign","getOptions","setOption","value","editable","emit","Core","OptionsEvents","UpdateMode","createCoreEvent","warnOptionNotEditable","createModeFactory","defaults","console","warn","getIdsToDelete","node","isNode","line","ids","move","ExploringMode","createMove","context","originalMethod","mv","isAtEndOfLine","moveNumber","getRelativeNode","deletePosition","createExploringModePlugin","apiOverrides","name","Plugin","Name","ExploringMode2","Plugin2","isAllowedToMove","Modes","Types","Explorer","plugins","create","canAddMovesToMainLine","canInteractWithPieces","canModifyExistingMovesOnMainLine"],"sourceRoot":""}