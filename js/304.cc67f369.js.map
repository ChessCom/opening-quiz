{"version":3,"file":"js/304.cc67f369.js","mappings":"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","sources":["webpack://opening-quiz/../../src/chessboard/modes/model/extend-mode.ts","webpack://opening-quiz/../../src/chessboard/modes/model/create-mode.ts","webpack://opening-quiz/../../src/chessboard/modes/setup/config/types.ts","webpack://opening-quiz/../../src/chessboard/modes/setup/api/drop-piece.ts","webpack://opening-quiz/../../src/chessboard/modes/setup/api/move-piece.ts","webpack://opening-quiz/../../src/chessboard/modes/setup/api/remove-piece.ts","webpack://opening-quiz/../../src/chessboard/modes/setup/api/index.ts","webpack://opening-quiz/../../src/chessboard/modes/setup/api-overrides/get-move.ts","webpack://opening-quiz/../../src/chessboard/modes/setup/api-overrides/move.ts","webpack://opening-quiz/../../src/chessboard/modes/setup/plugin/index.ts","webpack://opening-quiz/../../src/chessboard/modes/setup/base.ts","webpack://opening-quiz/../../src/chessboard/modes/setup/index.ts"],"sourcesContent":["import type { API } from 'api/config/types';\nimport type { Modes } from 'modes/config/types';\n\n/**\n * Extend or override a mode's api.\n */\nexport function createExtendMode(mode: Modes.API.Base, api: API.ExtendedAPI) {\n  return function extendMode(extensions: Record<string, Function>) {\n    const destroyOverrides: (Function | undefined)[] = Object.entries(extensions).map(\n      ([key, fn]) => {\n        if (!fn || !mode.overridableMethods?.includes(key)) {\n          return;\n        }\n\n        const cachedMethod = mode[key];\n\n        mode[key] = fn(mode, api);\n\n        return function destroyOverride() {\n          mode[key] = cachedMethod;\n        };\n      },\n    );\n\n    return function destroyOverride() {\n      destroyOverrides.map((fn) => fn?.());\n    };\n  };\n}\n","import type { API } from 'chessboard/api/config/types';\nimport { Core } from 'chessboard/core/config/types';\nimport { createCoreEvent } from 'chessboard/core/model/create-core-event';\nimport type { Modes } from 'modes/config/types';\nimport { createExtendMode } from 'modes/model/extend-mode';\n\ntype Model<T extends Modes.Options.Initial.Custom> = Modes.Options.Initial.Model<T>;\n\n/**\n * Build a mode.\n */\nfunction buildMode<T extends Modes.Options.Initial.Custom>({\n  base,\n  initialOptions,\n}: {\n  base: Modes.CreateMode.Base<Modes.Options.Exposed.Model<T>>;\n  initialOptions: Model<T>;\n}): Modes.CreateMode.Builder<T> {\n  return function getBoundMode(api: API.ExtendedAPI): Modes.API.Extended<T> {\n    const options = Object.keys(initialOptions).reduce(\n      (acc, key: keyof Model<T>) => {\n        acc[key] = initialOptions[key].default;\n\n        return acc;\n      },\n      {} as Modes.Options.Exposed.Model<T>,\n    );\n\n    const modeAPI = base({ api, options });\n    const extendMode = createExtendMode(modeAPI, api);\n\n    return Object.assign(modeAPI, { extendMode, getOptions, setOption });\n\n    /**\n     * Get the mode options.\n     */\n    function getOptions(): Modes.Options.Exposed.Model<T> {\n      return options;\n    }\n\n    /**\n     * Set an option, if the mode allows setting that option.\n     */\n    function setOption(key: keyof Model<T>, value: boolean) {\n      if (!initialOptions[key]?.editable) {\n        warnOptionNotEditable(key);\n        return;\n      }\n\n      options[key] = value;\n\n      api.emit(\n        Core.OptionsEvents.UpdateMode,\n        createCoreEvent(Core.OptionsEvents.UpdateMode, { [key]: value }),\n      );\n    }\n  };\n}\n\n/**\n * Create a mode, returning the mode itself and a function that enables\n * re-instantiating the mode with new options.\n */\nexport function createModeFactory<T extends Modes.Options.Initial.Custom>(\n  base: Modes.CreateMode.Base<Modes.Options.Exposed.Model<T>>,\n  defaults: Model<T>,\n) {\n  return function createMode(\n    options: Partial<Modes.Options.Exposed.Model<T>> = {},\n  ): Modes.CreateMode.Builder<T> {\n    const initialOptions = Object.keys(options).reduce((acc, key: keyof Model<T>) => {\n      if (defaults[key]?.editable) {\n        Object.assign(acc, { [key]: { default: options[key], editable: true } });\n      } else {\n        warnOptionNotEditable(key);\n      }\n\n      return acc;\n    }, defaults);\n\n    return buildMode({\n      base,\n      initialOptions,\n    });\n  };\n}\n\n/**\n * Warn the developer that an option is not editable.\n */\nfunction warnOptionNotEditable<T>(key: keyof T) {\n  //@ts-ignore\n  console.warn(`${key} is not an editable option in this mode.`); // eslint-disable-line\n}\n","import type { API } from 'chessboard/api/config/types';\nimport type { Modes } from 'modes/config/types';\nimport type JCE from '@chesscom/js-chess-engine';\n\nexport namespace Setup {\n  export interface API {\n    dropPiece({ piece, square }: { piece: JCE.Piece.Model; square: JCE.SanSquare }): API.Response;\n    movePiece({ from, piece, to }: Required<Model>): API.Response;\n    removePiece(from: JCE.SanSquare): API.Response;\n  }\n\n  export type Options = {\n    canDropOffBoard: Modes.Options.Initial.Option;\n    canDropPiecesContinuously: Modes.Options.Initial.Option;\n  };\n\n  export interface PublicAPI {\n    [Modes.Types.Setup]: API;\n  }\n\n  export enum Events {\n    DropPiece = 'DropPiece',\n    MovePiece = 'MovePiece',\n    RemovePiece = 'RemovePiece',\n  }\n\n  export interface Model {\n    from?: JCE.SanSquare;\n    piece?: JCE.Piece.Model;\n    to?: JCE.SanSquare;\n  }\n\n  export namespace Plugin {\n    export const Name = 'setup';\n  }\n}\n","import type { API } from 'api/config/types';\nimport type JCE from '@chesscom/js-chess-engine';\n\n/**\n * Create the dropPiece method.\n */\nexport function createDropPiece(context: API.Context) {\n  /**\n   * Drop a piece at a square on the board.\n   */\n  return function dropPiece({\n    piece,\n    square,\n  }: {\n    piece: JCE.Piece.Model;\n    square: JCE.SanSquare;\n  }): API.Response {\n    const { api, game } = context;\n\n    game.remove(square);\n\n    game.put(piece, square);\n\n    // Ensure the position in the headers are up to date\n    api.setGameDetails({ FEN: game.fen() });\n\n    return api.reload();\n  };\n}\n","import type { API } from 'api/config/types';\nimport type { Setup } from 'chessboard/modes/setup/config/types';\n\n/**\n * Create the movePiece method.\n */\nexport function createMovePiece(context: API.Context) {\n  /**\n   * Move a piece from one square to another.\n   */\n  return function movePiece({ from, piece, to }: Required<Setup.Model>): API.Response {\n    const { api, game } = context;\n\n    game.remove(from);\n    game.remove(to);\n\n    game.put(piece, to);\n\n    // Ensure the position in the headers are up to date\n    api.setGameDetails({ FEN: game.fen() });\n\n    return api.reload();\n  };\n}\n","import type { API } from 'api/config/types';\nimport type JCE from '@chesscom/js-chess-engine';\n\n/**\n * Create the removePiece method.\n */\nexport function createRemovePiece(context: API.Context) {\n  /**\n   * Remove the piece from a square.\n   */\n  return function removePiece(square: JCE.SanSquare): API.Response {\n    const { api, game } = context;\n\n    game.remove(square);\n\n    // Ensure the position in the headers are up to date\n    api.setGameDetails({ FEN: game.fen() });\n\n    return api.reload();\n  };\n}\n","import type { API } from 'api/config/types';\nimport { createDropPiece } from 'modes/setup/api/drop-piece';\nimport { createMovePiece } from 'modes/setup/api/move-piece';\nimport { createRemovePiece } from 'modes/setup/api/remove-piece';\n\n/**\n * Create the setup API.\n */\nexport function createSetupAPI(context: API.Context) {\n  return {\n    dropPiece: createDropPiece(context),\n    movePiece: createMovePiece(context),\n    removePiece: createRemovePiece(context),\n  };\n}\n","import type { Game } from 'chessboard/model/game/types';\n\n/**\n * Override the get move function by returning the raw move.\n */\nexport function createGetMove() {\n  return function getMove(move: Game.Move.Attempt): Game.Move.Attempt {\n    return move;\n  };\n}\n","import { formatAPIMove } from 'api/move/model/format-api-move';\nimport type { API } from 'chessboard/api/config/types';\nimport type { Setup } from 'modes/setup/config/types';\n/**\n * Override the move function.\n */\nexport function createMove(context: API.Context) {\n  const { api } = context;\n\n  return function move(mv: API.Options.Move | string): void {\n    const formattedMove = formatAPIMove(mv, api.getFEN(), api.getVariant());\n\n    if (!formattedMove) {\n      return;\n    }\n\n    const { setup } = api as API.ExtendedAPI<Setup.PublicAPI>;\n\n    let piece;\n    if (\n      'color' in formattedMove &&\n      formattedMove.color &&\n      'drop' in formattedMove &&\n      formattedMove.drop\n    ) {\n      piece = {\n        color: formattedMove.color,\n        type: formattedMove.drop,\n      };\n    } else if ('from' in formattedMove && formattedMove.from) {\n      piece = api.getPiece(formattedMove.from);\n    }\n\n    if (!piece) {\n      return;\n    }\n\n    if ('from' in formattedMove && formattedMove.from && formattedMove.to) {\n      setup.movePiece({\n        from: formattedMove.from,\n        piece,\n        to: formattedMove.to,\n      });\n    } else if (formattedMove.to) {\n      setup.dropPiece({ piece, square: formattedMove.to });\n    } else if ('from' in formattedMove && formattedMove.from) {\n      setup.removePiece(formattedMove.from);\n    }\n  };\n}\n","import type { Plugins } from 'chessboard/core/plugins/config/types';\nimport { Setup } from 'modes/setup/config/types';\nimport { createSetupAPI } from 'modes/setup/api';\nimport { createGetMove } from 'modes/setup/api-overrides/get-move';\nimport { createMove } from 'modes/setup/api-overrides/move';\n\n/**\n * Create a factory for the Setup mode's plugin.\n */\nexport function createSetupModePlugin(): Plugins.Model {\n  return {\n    api: createSetupAPI,\n    apiOverrides: {\n      getMove: createGetMove,\n      isLegalMove: () => true,\n      move: createMove,\n    },\n    name: Setup.Plugin.Name,\n  };\n}\n","import { Modes } from 'modes/config/types';\nimport { createSetupModePlugin } from 'modes/setup/plugin';\n\n/**\n * Create setup mode, bound to the API.\n */\nexport function base(): Modes.API.Base {\n  return {\n    isAllowedToMove,\n    name: Modes.Types.Setup,\n    plugins: [createSetupModePlugin()],\n  };\n\n  /**\n   * Can move for both sides.\n   */\n  function isAllowedToMove(): boolean {\n    return true;\n  }\n}\n","import { createModeFactory } from 'chessboard/modes/model/create-mode';\nimport { base } from 'chessboard/modes/setup/base';\n\nexport const create = createModeFactory(base, {\n  canAddMovesToMainLine: { default: false, editable: false },\n  canDropOffBoard: { default: true, editable: false },\n  canInteractWithPieces: { default: true, editable: true },\n  canModifyExistingMovesOnMainLine: { default: false, editable: false },\n  canDropPiecesContinuously: { default: true, editable: true },\n});\n"],"names":["createExtendMode","mode","api","extensions","destroyOverrides","Object","entries","map","key","fn","_a","overridableMethods","includes","cachedMethod","buildMode","base","initialOptions","options","keys","reduce","acc","default","modeAPI","extendMode","assign","getOptions","setOption","value","editable","emit","Core","OptionsEvents","UpdateMode","createCoreEvent","warnOptionNotEditable","createModeFactory","defaults","console","warn","Setup","createDropPiece","context","piece","square","game","remove","put","setGameDetails","FEN","fen","reload","createMovePiece","from","to","createRemovePiece","createSetupAPI","dropPiece","movePiece","removePiece","createGetMove","move","Setup2","Events2","Events","Plugin2","Name","Plugin","createMove","mv","formattedMove","formatAPIMove","getFEN","getVariant","setup","color","drop","type","getPiece","createSetupModePlugin","apiOverrides","getMove","isLegalMove","name","isAllowedToMove","Modes","Types","plugins","create","canAddMovesToMainLine","canDropOffBoard","canInteractWithPieces","canModifyExistingMovesOnMainLine","canDropPiecesContinuously"],"sourceRoot":""}