{"version":3,"file":"js/710.438b2fe1.js","mappings":"8KAMgB,SAAAA,EAAiBC,EAAsBC,GAC9C,gBAAoBC,GACzB,MAAMC,EAA6CC,OAAOC,QAAQH,GAAYI,KAC5E,EAAEC,EAAKC,MAHG,IAAAC,EAIR,IAAKD,KAAO,OAAAC,EAAAT,EAAKU,yBAAL,EAAAD,EAAyBE,SAASJ,IAC5C,OAGI,MAAAK,EAAeZ,EAAKO,GAI1B,OAFAP,EAAKO,GAAOC,EAAGR,EAAMC,GAEd,WACLD,EAAKO,GAAOK,CAAA,KAKlB,OAAO,WACLT,EAAiBG,KAAKE,GAAO,MAAAA,OAAA,EAAAA,KAAM,CACrC,CAEJ,CCjBA,SAASK,GAAkD,KACzDC,EAAA,eACAC,IAKO,gBAAsBd,GAC3B,MAAMe,EAAUZ,OAAOa,KAAKF,GAAgBG,QAC1C,CAACC,EAAKZ,KACJY,EAAIZ,GAAOQ,EAAeR,GAAKa,QAExBD,IAET,CAAC,GAGGE,EAAUP,EAAK,CAAEb,MAAKe,YACtBM,EAAavB,EAAiBsB,EAASpB,GAE7C,OAAOG,OAAOmB,OAAOF,EAAS,CAAEC,aAAYE,aAAYC,cAKxD,SAASD,IACA,OAAAR,CACT,CAKS,SAAAS,EAAUlB,EAAqBmB,G,OACjC,OAAAjB,EAAAM,EAAeR,SAAf,EAAAE,EAAqBkB,WAK1BX,EAAQT,GAAOmB,EAEXzB,EAAA2B,KACFC,EAAAA,EAAKC,cAAcC,YACnBC,EAAAA,EAAAA,GAAgBH,EAAAA,EAAKC,cAAcC,WAAY,CAAE,CAACxB,GAAMmB,MARxDO,EAAsB1B,EAU1B,EAEJ,CAMgB,SAAA2B,EACdpB,EACAqB,GAEA,OAAO,SACLnB,EAAmD,CAAC,GAE9C,MAAAD,EAAiBX,OAAOa,KAAKD,GAASE,QAAO,CAACC,EAAKZ,K,MAOhD,OANH,OAAAE,EAAA0B,EAAS5B,SAAT,EAAAE,EAAekB,UACjBvB,OAAOmB,OAAOJ,EAAK,CAAE,CAACZ,GAAM,CAAEa,QAASJ,EAAQT,GAAMoB,UAAU,KAE/DM,EAAsB1B,GAGjBY,CAAA,GACNgB,GAEH,OAAOtB,EAAU,CACfC,OACAC,kBACD,CAEL,CAKA,SAASkB,EAAyB1B,GAExB6B,QAAAC,KAAK,GAAG9B,4CAClB,C,2FCxFO,SAASO,IACP,OACLwB,kBACAC,KAAMC,EAAAA,EAAMC,MAAMC,kBAMpB,SAASJ,IACA,QACT,CACF,CCda,MAAAK,GAAST,EAAAA,EAAAA,GAAkBpB,EAAM,CAC5C8B,sBAAuB,CAAExB,SAAS,EAAOO,UAAU,GACnDkB,sBAAuB,CAAEzB,SAAS,EAAOO,UAAU,GACnDmB,iCAAkC,CAAE1B,SAAS,EAAOO,UAAU,I","sources":["webpack://opening-quiz/../../src/chessboard/modes/model/extend-mode.ts","webpack://opening-quiz/../../src/chessboard/modes/model/create-mode.ts","webpack://opening-quiz/../../src/chessboard/modes/passive-observing/base.ts","webpack://opening-quiz/../../src/chessboard/modes/passive-observing/index.ts"],"sourcesContent":["import type { API } from 'api/config/types';\nimport type { Modes } from 'modes/config/types';\n\n/**\n * Extend or override a mode's api.\n */\nexport function createExtendMode(mode: Modes.API.Base, api: API.ExtendedAPI) {\n  return function extendMode(extensions: Record<string, Function>) {\n    const destroyOverrides: (Function | undefined)[] = Object.entries(extensions).map(\n      ([key, fn]) => {\n        if (!fn || !mode.overridableMethods?.includes(key)) {\n          return;\n        }\n\n        const cachedMethod = mode[key];\n\n        mode[key] = fn(mode, api);\n\n        return function destroyOverride() {\n          mode[key] = cachedMethod;\n        };\n      },\n    );\n\n    return function destroyOverride() {\n      destroyOverrides.map((fn) => fn?.());\n    };\n  };\n}\n","import type { API } from 'chessboard/api/config/types';\nimport { Core } from 'chessboard/core/config/types';\nimport { createCoreEvent } from 'chessboard/core/model/create-core-event';\nimport type { Modes } from 'modes/config/types';\nimport { createExtendMode } from 'modes/model/extend-mode';\n\ntype Model<T extends Modes.Options.Initial.Custom> = Modes.Options.Initial.Model<T>;\n\n/**\n * Build a mode.\n */\nfunction buildMode<T extends Modes.Options.Initial.Custom>({\n  base,\n  initialOptions,\n}: {\n  base: Modes.CreateMode.Base<Modes.Options.Exposed.Model<T>>;\n  initialOptions: Model<T>;\n}): Modes.CreateMode.Builder<T> {\n  return function getBoundMode(api: API.ExtendedAPI): Modes.API.Extended<T> {\n    const options = Object.keys(initialOptions).reduce(\n      (acc, key: keyof Model<T>) => {\n        acc[key] = initialOptions[key].default;\n\n        return acc;\n      },\n      {} as Modes.Options.Exposed.Model<T>,\n    );\n\n    const modeAPI = base({ api, options });\n    const extendMode = createExtendMode(modeAPI, api);\n\n    return Object.assign(modeAPI, { extendMode, getOptions, setOption });\n\n    /**\n     * Get the mode options.\n     */\n    function getOptions(): Modes.Options.Exposed.Model<T> {\n      return options;\n    }\n\n    /**\n     * Set an option, if the mode allows setting that option.\n     */\n    function setOption(key: keyof Model<T>, value: boolean) {\n      if (!initialOptions[key]?.editable) {\n        warnOptionNotEditable(key);\n        return;\n      }\n\n      options[key] = value;\n\n      api.emit(\n        Core.OptionsEvents.UpdateMode,\n        createCoreEvent(Core.OptionsEvents.UpdateMode, { [key]: value }),\n      );\n    }\n  };\n}\n\n/**\n * Create a mode, returning the mode itself and a function that enables\n * re-instantiating the mode with new options.\n */\nexport function createModeFactory<T extends Modes.Options.Initial.Custom>(\n  base: Modes.CreateMode.Base<Modes.Options.Exposed.Model<T>>,\n  defaults: Model<T>,\n) {\n  return function createMode(\n    options: Partial<Modes.Options.Exposed.Model<T>> = {},\n  ): Modes.CreateMode.Builder<T> {\n    const initialOptions = Object.keys(options).reduce((acc, key: keyof Model<T>) => {\n      if (defaults[key]?.editable) {\n        Object.assign(acc, { [key]: { default: options[key], editable: true } });\n      } else {\n        warnOptionNotEditable(key);\n      }\n\n      return acc;\n    }, defaults);\n\n    return buildMode({\n      base,\n      initialOptions,\n    });\n  };\n}\n\n/**\n * Warn the developer that an option is not editable.\n */\nfunction warnOptionNotEditable<T>(key: keyof T) {\n  //@ts-ignore\n  console.warn(`${key} is not an editable option in this mode.`); // eslint-disable-line\n}\n","import { Modes } from 'chessboard/modes/config/types';\n\n/**\n * Create the base passive observing mode.\n */\nexport function base(): Modes.API.Base {\n  return {\n    isAllowedToMove,\n    name: Modes.Types.PassiveObserving,\n  };\n\n  /**\n   * Can only move if it's player's turn and they're trying to move their own piece.\n   */\n  function isAllowedToMove(): boolean {\n    return false;\n  }\n}\n","import { createModeFactory } from 'chessboard/modes/model/create-mode';\nimport { base } from 'chessboard/modes/passive-observing/base';\n\nexport const create = createModeFactory(base, {\n  canAddMovesToMainLine: { default: false, editable: false },\n  canInteractWithPieces: { default: false, editable: false },\n  canModifyExistingMovesOnMainLine: { default: false, editable: false },\n});\n"],"names":["createExtendMode","mode","api","extensions","destroyOverrides","Object","entries","map","key","fn","_a","overridableMethods","includes","cachedMethod","buildMode","base","initialOptions","options","keys","reduce","acc","default","modeAPI","extendMode","assign","getOptions","setOption","value","editable","emit","Core","OptionsEvents","UpdateMode","createCoreEvent","warnOptionNotEditable","createModeFactory","defaults","console","warn","isAllowedToMove","name","Modes","Types","PassiveObserving","create","canAddMovesToMainLine","canInteractWithPieces","canModifyExistingMovesOnMainLine"],"sourceRoot":""}