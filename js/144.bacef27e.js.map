{"version":3,"file":"js/144.bacef27e.js","mappings":"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","sources":["webpack://opening-quiz/../../src/chessboard/modes/model/extend-mode.ts","webpack://opening-quiz/../../src/chessboard/modes/model/create-mode.ts","webpack://opening-quiz/../../src/chessboard/model/game/can-move-forward.ts","webpack://opening-quiz/../../src/chessboard/plugins/analysis-overlay/config/types.ts","webpack://opening-quiz/../../src/chessboard/plugins/analysis-overlay/index.ts","webpack://opening-quiz/../../src/chessboard/modes/observing/api-overrides/load.ts","webpack://opening-quiz/../../src/chessboard/modes/observing/plugin/helpers/is-null-node.ts","webpack://opening-quiz/../../src/chessboard/modes/observing/api-overrides/move/replace-null-move.ts","webpack://opening-quiz/../../src/chessboard/modes/observing/api-overrides/move/index.ts","webpack://opening-quiz/../../src/chessboard/modes/observing/api-overrides/move-forward.ts","webpack://opening-quiz/../../src/chessboard/modes/observing/api/restore-position.ts","webpack://opening-quiz/../../src/chessboard/modes/observing/api/index.ts","webpack://opening-quiz/../../src/utils/app/model/or.ts","webpack://opening-quiz/../../src/chessboard/modes/observing/plugin/event-handlers/conditions.ts","webpack://opening-quiz/../../src/utils/get-main-line-ancestor-ids.ts","webpack://opening-quiz/../../src/chessboard/modes/observing/plugin/event-handlers/start-analysis.ts","webpack://opening-quiz/../../src/chessboard/modes/observing/plugin/event-handlers/select-first-variation-node.ts","webpack://opening-quiz/../../src/chessboard/modes/observing/plugin/event-handlers/select-first-variation-end.ts","webpack://opening-quiz/../../src/chessboard/modes/observing/plugin/event-handlers/remove-null-move-and-restore-position.ts","webpack://opening-quiz/../../src/chessboard/modes/observing/plugin/event-handlers/select-starting-position.ts","webpack://opening-quiz/../../src/chessboard/modes/observing/plugin/event-handlers/refresh-analysis-overlay.ts","webpack://opening-quiz/../../src/chessboard/modes/observing/plugin/event-handlers/restore-position.ts","webpack://opening-quiz/../../src/chessboard/modes/observing/plugin/event-handlers/select-null-node.ts","webpack://opening-quiz/../../src/chessboard/modes/observing/plugin/event-handlers/reset-cached-ids.ts","webpack://opening-quiz/../../src/chessboard/modes/observing/plugin/event-handlers/index.ts","webpack://opening-quiz/../../src/chessboard/modes/observing/plugin/index.ts","webpack://opening-quiz/../../src/chessboard/modes/observing/base.ts","webpack://opening-quiz/../../src/chessboard/modes/observing/index.ts"],"sourcesContent":["import type { API } from 'api/config/types';\nimport type { Modes } from 'modes/config/types';\n\n/**\n * Extend or override a mode's api.\n */\nexport function createExtendMode(mode: Modes.API.Base, api: API.ExtendedAPI) {\n  return function extendMode(extensions: Record<string, Function>) {\n    const destroyOverrides: (Function | undefined)[] = Object.entries(extensions).map(\n      ([key, fn]) => {\n        if (!fn || !mode.overridableMethods?.includes(key)) {\n          return;\n        }\n\n        const cachedMethod = mode[key];\n\n        mode[key] = fn(mode, api);\n\n        return function destroyOverride() {\n          mode[key] = cachedMethod;\n        };\n      },\n    );\n\n    return function destroyOverride() {\n      destroyOverrides.map((fn) => fn?.());\n    };\n  };\n}\n","import type { API } from 'chessboard/api/config/types';\nimport { Core } from 'chessboard/core/config/types';\nimport { createCoreEvent } from 'chessboard/core/model/create-core-event';\nimport type { Modes } from 'modes/config/types';\nimport { createExtendMode } from 'modes/model/extend-mode';\n\ntype Model<T extends Modes.Options.Initial.Custom> = Modes.Options.Initial.Model<T>;\n\n/**\n * Build a mode.\n */\nfunction buildMode<T extends Modes.Options.Initial.Custom>({\n  base,\n  initialOptions,\n}: {\n  base: Modes.CreateMode.Base<Modes.Options.Exposed.Model<T>>;\n  initialOptions: Model<T>;\n}): Modes.CreateMode.Builder<T> {\n  return function getBoundMode(api: API.ExtendedAPI): Modes.API.Extended<T> {\n    const options = Object.keys(initialOptions).reduce(\n      (acc, key: keyof Model<T>) => {\n        acc[key] = initialOptions[key].default;\n\n        return acc;\n      },\n      {} as Modes.Options.Exposed.Model<T>,\n    );\n\n    const modeAPI = base({ api, options });\n    const extendMode = createExtendMode(modeAPI, api);\n\n    return Object.assign(modeAPI, { extendMode, getOptions, setOption });\n\n    /**\n     * Get the mode options.\n     */\n    function getOptions(): Modes.Options.Exposed.Model<T> {\n      return options;\n    }\n\n    /**\n     * Set an option, if the mode allows setting that option.\n     */\n    function setOption(key: keyof Model<T>, value: boolean) {\n      if (!initialOptions[key]?.editable) {\n        warnOptionNotEditable(key);\n        return;\n      }\n\n      options[key] = value;\n\n      api.emit(\n        Core.OptionsEvents.UpdateMode,\n        createCoreEvent(Core.OptionsEvents.UpdateMode, { [key]: value }),\n      );\n    }\n  };\n}\n\n/**\n * Create a mode, returning the mode itself and a function that enables\n * re-instantiating the mode with new options.\n */\nexport function createModeFactory<T extends Modes.Options.Initial.Custom>(\n  base: Modes.CreateMode.Base<Modes.Options.Exposed.Model<T>>,\n  defaults: Model<T>,\n) {\n  return function createMode(\n    options: Partial<Modes.Options.Exposed.Model<T>> = {},\n  ): Modes.CreateMode.Builder<T> {\n    const initialOptions = Object.keys(options).reduce((acc, key: keyof Model<T>) => {\n      if (defaults[key]?.editable) {\n        Object.assign(acc, { [key]: { default: options[key], editable: true } });\n      } else {\n        warnOptionNotEditable(key);\n      }\n\n      return acc;\n    }, defaults);\n\n    return buildMode({\n      base,\n      initialOptions,\n    });\n  };\n}\n\n/**\n * Warn the developer that an option is not editable.\n */\nfunction warnOptionNotEditable<T>(key: keyof T) {\n  //@ts-ignore\n  console.warn(`${key} is not an editable option in this mode.`); // eslint-disable-line\n}\n","import type { API } from 'api/config/types';\nimport type { Game } from 'chessboard/model/game/types';\n\n/**\n * Determine whether a move can move forward on the same line\n */\nexport function canMoveForward({\n  api,\n  followAlternateLines = false,\n  mv,\n}: {\n  api: API.ExtendedAPI;\n  followAlternateLines?: boolean;\n  mv: Game.Move.FormattedMove;\n}): boolean {\n  const { game, mutateGame } = api.getContext();\n\n  const data = mutateGame(function callMethod() {\n    game.moveForward(followAlternateLines, mv);\n  });\n\n  if (!data?.plyDiff) {\n    return false;\n  }\n\n  game.moveBackward();\n\n  return true;\n}\n","export namespace AnalysisOverlay {\n  export namespace Plugin {\n    export const Name = 'analysis-overlay';\n  }\n}\n","import { AnalysisOverlay } from 'chessboard/plugins/analysis-overlay/config/types';\nimport { Core } from 'chessboard/core/config/types';\nimport { isOneOf } from 'utils/app/model/is-one-of';\nimport type { Plugins } from 'chessboard/core/plugins/config/types';\nimport type { Renderer } from 'chessboard/renderers/config/types';\n\n/**\n * Manage the display of the analysis overlay.\n */\nexport function createAnalysisOverlayPlugin(): Plugins.Model {\n  let renderer: Renderer.Model;\n\n  return {\n    destroy,\n    match: [\n      {\n        condition: isOneOf([\n          Core.APIEvents.Load,\n          Core.OptionsEvents.Update,\n          Core.InstanceEvents.ModeChanged,\n          Core.InstanceEvents.RendererSet,\n        ]),\n        handler: updateAnalysisOverlay,\n      },\n    ],\n    name: AnalysisOverlay.Plugin.Name,\n  };\n\n  /**\n   * Destroy the analysis overlay plugin.\n   */\n  function destroy() {\n    renderer?.removeAnalysisOverlay();\n  }\n\n  /**\n   * Run.\n   */\n  function updateAnalysisOverlay(_event: Core.Event, context: Core.Context) {\n    const { options, renderer: contextRenderer } = context;\n\n    if (!renderer && contextRenderer) {\n      renderer = contextRenderer;\n    }\n\n    if (options.overlayInAnalysisMode) {\n      renderer?.addAnalysisOverlay();\n    } else {\n      renderer?.removeAnalysisOverlay();\n    }\n  }\n}\n","import type { API } from 'api/config/types';\nimport type JCE from '@chesscom/js-chess-engine';\nimport { ObservingMode } from 'chessboard/modes/observing/config/types';\n\n/**\n * Create the load method override.\n */\nexport function createLoad(context: API.Context) {\n  const { api, respond } = context;\n  const originalMethod = api.load;\n\n  /**\n   * Load method override.\n   */\n  return function load(apiLoadOptions: API.Options.Load, option?: JCE.Options.LoadMoves) {\n    const observing = <ObservingMode.API>api.observing;\n    observing.setCachedPGN('');\n\n    if (observing.isAnalyzing()) {\n      observing.clearCachedIds();\n      respond(ObservingMode.APIEvents.AnalysisEnd);\n    }\n\n    return originalMethod(apiLoadOptions, option);\n  };\n}\n","import type { Game } from 'chessboard/model/game/types';\n\n/**\n * Check if passed node is a null node\n */\nexport function isNullNode(node: Game.Move.Node | Game.Line | null): boolean {\n  return Boolean(node && 'san' in node && node.san === '--');\n}\n","import type { API } from 'api/config/types';\nimport type JCE from '@chesscom/js-chess-engine';\nimport type { ObservingMode } from 'chessboard/modes/observing/config/types';\nimport type { Game } from 'chessboard/model/game/types';\n\n/**\n * Replace null move\n */\nexport function replaceNullMove({\n  move,\n  api,\n  game,\n}: {\n  move: Game.Move.FormattedMove;\n  api: API.ExtendedAPI;\n  game: JCE.Game;\n}): void {\n  const observing = <ObservingMode.API>api.observing;\n  const ids = game.ids();\n\n  game.selectPosition(0, 0);\n  game.createVariation(); // create new line\n  game.move(move);\n\n  const newLineIndex = api.getRawLines().length - 1;\n\n  game.promoteVariation(newLineIndex, 0);\n  game.deletePosition(0, newLineIndex);\n\n  const { playSounds } = api.getOptions();\n\n  if (playSounds) {\n    api.setOptions({ playSounds: false });\n  }\n\n  const cachedIds = observing.getCachedIds();\n\n  if (cachedIds) {\n    observing.clearCachedIds();\n  }\n\n  // make load event silent\n  api.load({ pgn: api.getPGN() });\n\n  if (playSounds) {\n    api.setOptions({ playSounds: true });\n  }\n\n  if (cachedIds) {\n    observing.setCachedIds(cachedIds.move, cachedIds.line);\n  }\n\n  api.selectNode(ids.line, ids.move);\n}\n","import JCE from '@chesscom/js-chess-engine';\nimport type { API } from 'api/config/types';\nimport { canMoveForward } from 'chessboard/model/game/can-move-forward';\nimport { Core } from 'chessboard/core/config/types';\nimport { isMainLine } from 'chessboard/model/line/is-main-line';\nimport { ObservingMode } from 'chessboard/modes/observing/config/types';\nimport { isNullNode } from 'chessboard/modes/observing/plugin/helpers/is-null-node';\nimport { replaceNullMove } from 'chessboard/modes/observing/api-overrides/move/replace-null-move';\nimport { formatAPIMove } from 'api/move/model/format-api-move';\nimport type { Game } from 'chessboard/model/game/types';\n\n/**\n * Create the move method override.\n */\nexport function createMove(context: API.Context) {\n  const { api, respond, game } = context;\n  const originalMethod = api.move;\n\n  /**\n   * Move method override.\n   */\n  return function move(mv: API.Options.Move | string): API.Response | undefined {\n    const pgn = api.observing.getCachedPGN();\n\n    if (pgn) {\n      api.load({ pgn });\n    }\n\n    const formattedMove = formatAPIMove(mv, api.getFEN(), api.getVariant());\n\n    // if the move can't be formatted, then just pass it to the original method.\n    if (!formattedMove) {\n      return originalMethod(mv);\n    }\n\n    return formattedMove.userGenerated\n      ? userGeneratedMove(formattedMove)\n      : programmaticMove(formattedMove);\n  };\n\n  /**\n   * Handle a move that was generated by the user.\n   */\n  function userGeneratedMove(mv: Game.Move.FormattedMove): API.Response | undefined {\n    const observing = <ObservingMode.API>api.observing;\n    const { move, line } = game.ids();\n    const isAnalyzing = observing.isAnalyzing();\n    const lineBeforeIsMainLine = isMainLine(line);\n\n    if (api.getLine(0)?.length === 0) {\n      game.move('--');\n    }\n\n    const firstMove = api.getNodeByIds({ line: 0, move: 0 });\n\n    if (isNullNode(firstMove) && isNullNode(api.getSelectedNode())) {\n      api.selectNode(0, -1);\n    }\n\n    if (isNullNode(firstMove) && 'san' in mv) {\n      const obj = JCE.sanToObj(mv.san, api.getFEN());\n\n      Object.assign(mv, obj);\n\n      mv.san = '';\n    }\n\n    if (\n      lineBeforeIsMainLine &&\n      !canMoveForward({ api, followAlternateLines: true, mv }) &&\n      api.isAtEndOfLine()\n    ) {\n      api.createContinuation();\n    }\n\n    const moveResponse = originalMethod(mv);\n\n    if (moveResponse?.type !== Core.APIEvents.Move) {\n      return moveResponse;\n    }\n\n    const lineAfterIsMainLine = isMainLine(game.ids().line);\n\n    if (lineBeforeIsMainLine && !lineAfterIsMainLine && !isAnalyzing) {\n      observing.setCachedIds(move, line);\n      respond(ObservingMode.APIEvents.AnalysisStart);\n    }\n\n    return moveResponse;\n  }\n\n  /**\n   * Handle a move that was made programmatically. When the current position is not at the end of\n   * the main line, the move is added to the end, but the position is not updated (So it will be\n   * visible on the move list, for instance).\n   */\n  function programmaticMove(mv: Game.Move.FormattedMove): API.Response | undefined {\n    const observing = <ObservingMode.API>api.observing;\n    const nullMovePresent = isNullNode(api.getNodeByIds({ line: 0, move: 0 }));\n    const firstLine = api.getLine(0);\n\n    if (nullMovePresent && firstLine?.length === 1) {\n      replaceNullMove({ move: mv, api, game });\n\n      return;\n    }\n\n    if (observing.isAnalyzing() || !api.isAtEndOfLine()) {\n      return api.addMoveToEndOfLine(mv, 0);\n    }\n\n    return originalMethod(mv, false);\n  }\n}\n","import type { API } from 'api/config/types';\nimport type { Move } from 'chessboard/model/move/types';\nimport type JCE from '@chesscom/js-chess-engine';\n\n/**\n * Create the move forward method override.\n */\nexport function createMoveForward({ api }: API.Context) {\n  const originalMethod = api.moveForward;\n\n  /**\n   * Move Forward method override.\n   */\n  return function moveForward(\n    followContinuationsOrMoveForwardParams?: Move.Forward | boolean,\n    mv?: JCE.AnyMoveType,\n  ): API.Response | undefined {\n    return originalMethod(defaultToFalseWhenNotAnalyzing(), mv);\n\n    /**\n     * Default to false when not analyzing\n     */\n    function defaultToFalseWhenNotAnalyzing() {\n      return (\n        followContinuationsOrMoveForwardParams ?? (!api.observing.isAnalyzing() ? false : undefined)\n      );\n    }\n  };\n}\n","import type { API } from 'api/config/types';\nimport type JCE from '@chesscom/js-chess-engine';\nimport type { ObservingMode } from 'chessboard/modes/observing/config/types';\nimport { isNullNode } from 'chessboard/modes/observing/plugin/helpers/is-null-node';\n\n/**\n * Create the restorePosition method.\n */\nexport function createRestorePosition(context: API.Context) {\n  const { api } = context;\n\n  /**\n   *  Restore the position before the game went into analysis.\n   */\n  return function restorePosition(\n    loadOptions?: API.Options.Load,\n    options?: JCE.Options.LoadMoves,\n  ): void {\n    const observing = <ObservingMode.API>api.observing;\n\n    if (!observing.isAnalyzing()) {\n      return;\n    }\n\n    if (isNullNode(api.getNodeByIds({ line: 0, move: 0 }))) {\n      const pgn = api.getPGN();\n\n      api.load({ pgn: '*' });\n\n      observing.setCachedPGN(pgn);\n\n      return;\n    }\n\n    const cachedIds = observing.getCachedIds();\n\n    if (loadOptions) {\n      api.load(loadOptions, options);\n    } else {\n      api.load({ pgn: api.getPGN() });\n    }\n\n    if (cachedIds) {\n      api.selectNode(cachedIds.line, cachedIds.move);\n    }\n  };\n}\n","import type { API } from 'api/config/types';\nimport type { ObservingMode } from 'chessboard/modes/observing/config/types';\nimport { createRestorePosition } from 'chessboard/modes/observing/api/restore-position';\n\n/**\n * Create the observing mode API.\n */\nexport function createObservingModeAPI(context: API.Context): ObservingMode.API {\n  let cachedIds: ObservingMode.CachedIds | undefined;\n  let cachedPGN = '';\n\n  return {\n    clearCachedIds,\n    getCachedIds,\n    isAnalyzing,\n    restorePosition: createRestorePosition(context),\n    setCachedIds,\n    setCachedPGN,\n    getCachedPGN,\n  };\n\n  /**\n   * Clear the cached ids.\n   */\n  function clearCachedIds(): void {\n    cachedIds = undefined;\n  }\n\n  /**\n   * Return the cached ids.\n   */\n  function getCachedIds(): ObservingMode.CachedIds | undefined {\n    return cachedIds;\n  }\n\n  /**\n   * Determine if observing mode is currently analyzing.\n   */\n  function isAnalyzing(): boolean {\n    return Boolean(cachedIds);\n  }\n\n  /**\n   * Set the cached ids.\n   */\n  function setCachedIds(move: number, line: number): void {\n    cachedIds = { move, line };\n  }\n\n  /**\n   * Set the cached PGN.\n   */\n  function setCachedPGN(pgn: string): void {\n    cachedPGN = pgn;\n  }\n\n  /**\n   * Get the cached PGN.\n   */\n  function getCachedPGN(): string {\n    return cachedPGN;\n  }\n}\n","import type { Core } from 'chessboard/core/config/types';\n\n/**\n * Check if one of the conditions is true\n */\nexport function or(...conditions: Condition[]) {\n  return function checkConditions(event: Core.Event, context: Core.Context): boolean {\n    return Boolean(conditions.find((item) => item(event, context)));\n  };\n}\n\ntype Condition = (event: Core.Event, context: Core.Context) => boolean;\n","import type { Core } from 'chessboard/core/config/types';\nimport { isNullNode } from 'chessboard/modes/observing/plugin/helpers/is-null-node';\n\nexport {\n  firstNodeDeletedFromVariation,\n  firstVariationEmpty,\n  isAnalyzing,\n  isNotAnalyzing,\n  lineChanged,\n  nullMoveAbsent,\n  nullMovePresent,\n  nullMoveSelected,\n  startingPositionSelected,\n  variationSelected,\n};\n\n/**\n * Check if line changed\n */\nfunction lineChanged({ data }: Core.Event): boolean {\n  return data.lineDiff !== undefined && data.lineDiff !== 0;\n}\n\n/**\n * Check if not analyzing in observing mode\n */\nfunction isNotAnalyzing(event: Core.Event, context: Core.Context): boolean {\n  return !isAnalyzing(event, context);\n}\n\n/**\n * Check if analyzing in observing mode\n */\nfunction isAnalyzing(_event: Core.Event, { api }: Core.Context): boolean {\n  return api.observing.isAnalyzing();\n}\n\n/**\n * Check if null move is present\n */\nfunction nullMovePresent(_event: Core.Event, context: Core.Context): boolean {\n  const { api } = context;\n\n  return isNullNode(api.getNodeByIds({ line: 0, move: 0 }));\n}\n\n/**\n * Check if null move is absent\n */\nfunction nullMoveAbsent(_event: Core.Event, context: Core.Context): boolean {\n  const { api } = context;\n\n  return !isNullNode(api.getNodeByIds({ line: 0, move: 0 }));\n}\n\n/**\n * Check if null move is selected\n */\nfunction nullMoveSelected(_event: Core.Event, context: Core.Context): boolean {\n  const { api } = context;\n\n  return isNullNode(api.getSelectedNode());\n}\n\n/**\n * Check if starting position is selected\n */\nfunction startingPositionSelected(_event: Core.Event, context: Core.Context): boolean {\n  const { api } = context;\n  const selectedNode = api.getSelectedNode();\n\n  return selectedNode?.ids?.line === 0 && selectedNode?.ids?.move === -1;\n}\n\n/**\n * Check if variation position is selected\n */\nfunction variationSelected(_event: Core.Event, context: Core.Context): boolean {\n  const { api } = context;\n\n  const selectedNode = api.getSelectedNode();\n\n  return Boolean(selectedNode && selectedNode.ids.line !== 0);\n}\n\n/**\n * Check if first variation is empty\n */\nfunction firstVariationEmpty(_event: Core.Event, context: Core.Context): boolean {\n  const { api } = context;\n  const firstLine = api.getLine(1);\n\n  return Boolean(!firstLine || firstLine.length === 0);\n}\n\n/**\n * Check if the first node of a variation was deleted\n */\nfunction firstNodeDeletedFromVariation(event: Core.Event, _context: Core.Context): boolean {\n  const { data } = event;\n\n  return Boolean(data.line?.atMoveNode === 0);\n}\n","import type JCE from '@chesscom/js-chess-engine';\n\n/**\n * Gets the ids of the main line ancestor for a specific node\n */\nexport function getMainLineAncestorIds(\n  ids: JCE.Ids | null | undefined,\n  lines: JCE.Line[],\n): JCE.Ids | null {\n  if (!ids) {\n    return null;\n  }\n\n  if (ids.line === 0) {\n    return ids;\n  }\n\n  const line = lines[ids.line];\n\n  // The most likely reason for this is that the node/line was deleted,\n  // in which case we have no way of finding the main line ancestor.\n  if (!line || line.parentId === undefined || line.atMoveNode === undefined) {\n    return null;\n  }\n\n  // assumption: all lines eventually reach the main line and dont loop\n  return getMainLineAncestorIds({ line: line.parentId, move: line.atMoveNode }, lines);\n}\n","import type { Core } from 'chessboard/core/config/types';\nimport { ObservingMode } from 'chessboard/modes/observing/config/types';\nimport { getMainLineAncestorIds } from 'src/utils/get-main-line-ancestor-ids';\n\n/**\n * Initialize analysis in observing mode\n */\nexport function startAnalysis(_event: Core.Event, context: Core.Context) {\n  const { api, queue } = context;\n\n  if (api.observing.isAnalyzing()) {\n    return;\n  }\n\n  queue.add(function initAnalysis() {\n    const ids = getMainLineAncestorIds(api.getSelectedNode()?.ids, api.getRawLines());\n\n    if (!ids) {\n      return;\n    }\n\n    api.observing.setCachedIds(ids.move, ids.line);\n\n    api.getContext().respond(ObservingMode.APIEvents.AnalysisStart);\n  });\n}\n","import type { Core } from 'chessboard/core/config/types';\n\n/**\n *  Select first node of the first variation\n */\nexport function selectFirstVariationNode(_event: Core.Event, context: Core.Context) {\n  const { api, queue } = context;\n\n  queue.add(function selectNode() {\n    api.selectNode(1, 0);\n  });\n}\n","import type { Core } from 'chessboard/core/config/types';\n\n/**\n * Select first variation end node\n */\nexport function selectFirstVariationEnd(_event: Core.Event, context: Core.Context) {\n  const { api, queue } = context;\n  const firstLine = api.getLine(1);\n\n  if (firstLine) {\n    const lastMove = Math.max(...firstLine.map((item) => item.moveNumber));\n\n    queue.add(function selectNode() {\n      api.selectNode(1, lastMove);\n    });\n  }\n}\n","import type { Core } from 'chessboard/core/config/types';\nimport type { ObservingMode } from 'chessboard/modes/observing/config/types';\n\n/**\n * Delete null move and restore position\n */\nexport function removeNullMoveAndRestorePosition(_event: Core.Event, context: Core.Context) {\n  const { api } = context;\n  const observing = <ObservingMode.API>api.observing;\n\n  // remove null move\n  api.deletePosition(0, 0);\n\n  observing.setCachedPGN('');\n  observing.restorePosition();\n}\n","import type { Core } from 'chessboard/core/config/types';\n\n/**\n * Select starting position\n */\nexport function selectStartingPosition(_event: Core.Event, context: Core.Context) {\n  const { api, queue } = context;\n\n  queue.add(function selectNode() {\n    api.selectNode(0, -1);\n  });\n}\n","import type { Core } from 'chessboard/core/config/types';\nimport type { ObservingMode } from 'chessboard/modes/observing/config/types';\n\n/**\n * Update the analysis overlay visibility.\n */\nexport function refreshAnalysisOverlay(_event: Core.Event, context: Core.Context) {\n  const { api } = context;\n  const observing = <ObservingMode.API>api.observing;\n\n  const { overlayInAnalysisMode: oldSetting } = api.getOptions();\n  const newSetting = observing.isAnalyzing();\n\n  if (newSetting !== oldSetting) {\n    api.setOptions({ overlayInAnalysisMode: newSetting });\n  }\n}\n","import type { Core } from 'chessboard/core/config/types';\nimport type { ObservingMode } from 'chessboard/modes/observing/config/types';\n\n/**\n * Restore position\n */\nexport function restorePosition(_event: Core.Event, context: Core.Context) {\n  const { api } = context;\n  const observing = <ObservingMode.API>api.observing;\n\n  observing.restorePosition();\n}\n","import type { Core } from 'chessboard/core/config/types';\n\n/**\n * Select null node\n */\nexport function selectNullNode(_event: Core.Event, context: Core.Context) {\n  const { api, queue } = context;\n\n  queue.add(function selectNode() {\n    api.selectNode(0, 0);\n  });\n}\n","import type { ObservingMode } from 'chessboard/modes/observing/config/types';\nimport type { Core } from 'chessboard/core/config/types';\n\n/**\n * Find the correct position to set as the cached ids\n */\nexport function resetCachedIds(_event: Core.Event, context: Core.Context) {\n  const { api } = context;\n  const observing = <ObservingMode.API>api.observing;\n\n  const currentIds = api.getSelectedNode()?.ids;\n\n  if (!currentIds) {\n    return;\n  }\n\n  // If we're back to the main line, these should be the new cached ids\n  if (currentIds.line === 0) {\n    observing.setCachedIds(currentIds.move, currentIds.line);\n\n    return;\n  }\n\n  let line = api.getLine(currentIds.line)?.id;\n\n  if (!line) {\n    return;\n  }\n\n  // If we are a few lines deep, we want to find the base variation line\n  while (api.getLine(line)?.parentId) {\n    const parentId = api.getLine(line)?.parentId;\n\n    if (typeof parentId === 'number') {\n      line = parentId;\n    }\n\n    if (!parentId) {\n      break;\n    }\n  }\n\n  const baseVariation = api.getLine(line);\n\n  let moveNumber = baseVariation?.atMoveNode ?? 0;\n\n  // continuations start from main line branching point, so initial move number will equal main line\n  // variations start one move after main line branching point, so subtract one to return correctly\n  if (!baseVariation?.[0].isContinuation) {\n    moveNumber -= 1;\n  }\n\n  observing.setCachedIds(moveNumber, 0);\n}\n","import { Core } from 'chessboard/core/config/types';\nimport type { Plugins } from 'chessboard/core/plugins/config/types';\nimport { isOneOf } from 'utils/app/model/is-one-of';\nimport { is } from 'utils/app/model/is';\nimport { or } from 'utils/app/model/or';\nimport { ObservingMode } from 'chessboard/modes/observing/config/types';\nimport { pipeConditions } from 'src/utils/app/model/pipe-conditions';\nimport {\n  firstNodeDeletedFromVariation,\n  firstVariationEmpty,\n  isAnalyzing,\n  isNotAnalyzing,\n  lineChanged,\n  nullMoveAbsent,\n  nullMovePresent,\n  nullMoveSelected,\n  startingPositionSelected,\n  variationSelected,\n} from 'chessboard/modes/observing/plugin/event-handlers/conditions';\nimport { startAnalysis } from 'chessboard/modes/observing/plugin/event-handlers/start-analysis';\nimport { selectFirstVariationNode } from 'chessboard/modes/observing/plugin/event-handlers/select-first-variation-node';\nimport { selectFirstVariationEnd } from 'chessboard/modes/observing/plugin/event-handlers/select-first-variation-end';\nimport { removeNullMoveAndRestorePosition } from 'chessboard/modes/observing/plugin/event-handlers/remove-null-move-and-restore-position';\nimport { selectStartingPosition } from 'chessboard/modes/observing/plugin/event-handlers/select-starting-position';\nimport { refreshAnalysisOverlay } from 'chessboard/modes/observing/plugin/event-handlers/refresh-analysis-overlay';\nimport { restorePosition } from 'chessboard/modes/observing/plugin/event-handlers/restore-position';\nimport { selectNullNode } from 'chessboard/modes/observing/plugin/event-handlers/select-null-node';\nimport { positionChangeEvents } from 'chessboard/config/position-change-events';\nimport { resetCachedIds } from './reset-cached-ids';\n\n/**\n * Create event handlers for observing mode plugin\n */\nexport function createEventHandlers(): Plugins.Match[] {\n  return [\n    {\n      // when analysis starts/ends, refresh analysis overlay board setting\n      // (analysis-overlay plugin listens to this)\n      condition: isOneOf([\n        ObservingMode.APIEvents.AnalysisStart,\n        ObservingMode.APIEvents.AnalysisEnd,\n      ]),\n      handler: refreshAnalysisOverlay,\n    },\n    // while analyzing, we want to ensure our cached ids return us to the expected position\n    {\n      condition: pipeConditions(isOneOf(positionChangeEvents), isAnalyzing),\n      handler: resetCachedIds,\n    },\n    {\n      // exit analysis and delete null move when resetting back to main line (null move present)\n      // (e.g. by 'Clear All Analysis' from HML)\n      condition: pipeConditions(is(Core.APIEvents.ResetToMainLine), nullMovePresent),\n      handler: removeNullMoveAndRestorePosition,\n    },\n    {\n      // exit analysis when resetting back to main line (null move absent)\n      // (e.g. by 'Clear All Analysis' from HML)\n      condition: pipeConditions(is(Core.APIEvents.ResetToMainLine), nullMoveAbsent),\n      handler: restorePosition,\n    },\n    {\n      // exit analysis and delete null move if a node gets deleted and the variation is empty (null move present)\n      // (this means that there are no more variations with moves)\n      condition: pipeConditions(\n        is(Core.APIEvents.DeletePosition),\n        nullMovePresent,\n        firstVariationEmpty,\n      ),\n      handler: removeNullMoveAndRestorePosition,\n    },\n    {\n      // when a variation gets deleted, select null move (null move present)\n      // (this way subsequent moves by the user will goto a new variation and not to the main line)\n      condition: pipeConditions(\n        is(Core.APIEvents.DeletePosition),\n        nullMovePresent,\n        firstNodeDeletedFromVariation,\n      ),\n      handler: selectNullNode,\n    },\n    {\n      // exit analysis if a node gets deleted and the variation is empty (null move absent)\n      // (this means that there are no more variations with moves)\n      condition: pipeConditions(\n        is(Core.APIEvents.DeletePosition),\n        nullMoveAbsent,\n        firstVariationEmpty,\n      ),\n      handler: restorePosition,\n    },\n    {\n      // select starting position if null move is selected\n      // (otherwise user cannot make moves anymore)\n      condition: pipeConditions(is(Core.APIEvents.SelectNode), nullMoveSelected),\n      handler: selectStartingPosition,\n    },\n    // keep analyzing if mode is reset to observing mode\n    {\n      condition: pipeConditions(is(Core.InstanceEvents.ModeChanged), variationSelected),\n      handler: startAnalysis,\n    },\n    {\n      // Handle situation where we select a variation with selectNode\n      condition: pipeConditions(is(Core.APIEvents.SelectNode), nullMoveAbsent, variationSelected),\n      handler: startAnalysis,\n    },\n    {\n      // start analysis when a moving forward onto a continuation\n      condition: pipeConditions(is(Core.APIEvents.MoveForward), isNotAnalyzing, lineChanged),\n      handler: startAnalysis,\n    },\n    {\n      // go to the first variation node when moving forward (null move present + starting position or null move selected)\n      condition: pipeConditions(\n        is(Core.APIEvents.MoveForward),\n        nullMovePresent,\n        or(nullMoveSelected, startingPositionSelected),\n      ),\n      handler: selectFirstVariationNode,\n    },\n    {\n      // go to the first variation end node when moving to the end (null move present + starting position or null move selected)\n      condition: pipeConditions(\n        is(Core.APIEvents.SelectLineEnd),\n        nullMovePresent,\n        or(nullMoveSelected, startingPositionSelected),\n      ),\n      handler: selectFirstVariationEnd,\n    },\n  ];\n}\n","import type { Core } from 'chessboard/core/config/types';\nimport type { Plugins } from 'chessboard/core/plugins/config/types';\nimport { createLoad } from 'chessboard/modes/observing/api-overrides/load';\nimport { createMove } from 'chessboard/modes/observing/api-overrides/move';\nimport { createMoveForward } from 'chessboard/modes/observing/api-overrides/move-forward';\nimport { ObservingMode } from 'chessboard/modes/observing/config/types';\nimport { createObservingModeAPI } from 'chessboard/modes/observing/api';\nimport { createEventHandlers } from 'chessboard/modes/observing/plugin/event-handlers';\n\n/**\n * Observing mode's plugin.\n */\nexport function createObservingModePlugin(): Plugins.Model {\n  return {\n    api: createObservingModeAPI,\n    apiOverrides: {\n      load: createLoad,\n      move: createMove,\n      moveForward: createMoveForward,\n    },\n    create,\n    match: createEventHandlers(),\n    name: ObservingMode.Plugin.Name,\n  };\n\n  /**\n   * Initialise the plugin.\n   */\n  function create(context: Core.Context) {\n    const { api } = context;\n\n    api.setOptions({ overlayInAnalysisMode: false });\n  }\n}\n","import { createAnalysisOverlayPlugin } from 'chessboard/plugins/analysis-overlay';\nimport { createObservingModePlugin } from 'chessboard/modes/observing/plugin';\nimport { Modes } from 'chessboard/modes/config/types';\n\n/**\n * Create the base observing mode.\n */\nexport function base(): Modes.API.Base {\n  return {\n    isAllowedToMove,\n    name: Modes.Types.Observing,\n    plugins: [createAnalysisOverlayPlugin(), createObservingModePlugin()],\n  };\n\n  /**\n   * Is allowed to move\n   */\n  function isAllowedToMove(): boolean {\n    return true;\n  }\n}\n","import { createModeFactory } from 'chessboard/modes/model/create-mode';\nimport { base } from 'chessboard/modes/observing/base';\n\nexport const create = createModeFactory(base, {\n  canAddMovesToMainLine: { default: true, editable: false },\n  canInteractWithPieces: { default: true, editable: true },\n  canModifyExistingMovesOnMainLine: { default: false, editable: false },\n});\n"],"names":["createExtendMode","mode","api","extensions","destroyOverrides","Object","entries","map","key","fn","_a","overridableMethods","includes","cachedMethod","buildMode","base","initialOptions","options","keys","reduce","acc","default","modeAPI","extendMode","assign","getOptions","setOption","value","editable","emit","Core","OptionsEvents","UpdateMode","createCoreEvent","warnOptionNotEditable","createModeFactory","defaults","console","warn","canMoveForward","followAlternateLines","mv","game","mutateGame","getContext","data","moveForward","plyDiff","moveBackward","AnalysisOverlay","AnalysisOverlay2","Plugin2","Name","Plugin","createAnalysisOverlayPlugin","renderer","destroy","match","condition","isOneOf","APIEvents","Load","Update","InstanceEvents","ModeChanged","RendererSet","handler","updateAnalysisOverlay","name","removeAnalysisOverlay","_event","context","contextRenderer","overlayInAnalysisMode","addAnalysisOverlay","createLoad","respond","originalMethod","load","apiLoadOptions","option","observing","setCachedPGN","isAnalyzing","clearCachedIds","ObservingMode","AnalysisEnd","isNullNode","node","Boolean","san","replaceNullMove","move","ids","selectPosition","createVariation","newLineIndex","getRawLines","length","promoteVariation","deletePosition","playSounds","setOptions","cachedIds","getCachedIds","pgn","getPGN","setCachedIds","line","selectNode","createMove","getCachedPGN","formattedMove","formatAPIMove","getFEN","getVariant","userGenerated","userGeneratedMove","programmaticMove","lineBeforeIsMainLine","isMainLine","getLine","firstMove","getNodeByIds","getSelectedNode","obj","JCE","sanToObj","isAtEndOfLine","createContinuation","moveResponse","type","Move","lineAfterIsMainLine","AnalysisStart","nullMovePresent","firstLine","addMoveToEndOfLine","createMoveForward","followContinuationsOrMoveForwardParams","defaultToFalseWhenNotAnalyzing","createRestorePosition","loadOptions","createObservingModeAPI","cachedPGN","restorePosition","or","conditions","event","find","item","lineChanged","lineDiff","isNotAnalyzing","nullMoveAbsent","nullMoveSelected","startingPositionSelected","selectedNode","_b","variationSelected","firstVariationEmpty","firstNodeDeletedFromVariation","_context","atMoveNode","getMainLineAncestorIds","lines","parentId","startAnalysis","queue","add","selectFirstVariationNode","selectFirstVariationEnd","lastMove","Math","max","moveNumber","removeNullMoveAndRestorePosition","selectStartingPosition","refreshAnalysisOverlay","oldSetting","newSetting","selectNullNode","resetCachedIds","_c","_d","currentIds","id","baseVariation","isContinuation","createEventHandlers","pipeConditions","positionChangeEvents","is","ResetToMainLine","DeletePosition","SelectNode","MoveForward","SelectLineEnd","createObservingModePlugin","apiOverrides","create","isAllowedToMove","Modes","Types","Observing","plugins","canAddMovesToMainLine","canInteractWithPieces","canModifyExistingMovesOnMainLine"],"sourceRoot":""}