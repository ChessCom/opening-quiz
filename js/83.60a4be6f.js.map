{"version":3,"file":"js/83.60a4be6f.js","mappings":"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","sources":["webpack://opening-quiz/../../src/chessboard/model/arrows/calculate-arrow-slope.ts","webpack://opening-quiz/../../src/chessboard/model/board/get-file-rank-from-san.ts","webpack://opening-quiz/../../src/chessboard/model/arrows/get-knight-arrow-rotation.ts","webpack://opening-quiz/../../src/chessboard/model/board/get-san-from-file-rank.ts","webpack://opening-quiz/../../src/utils/set-test-data.ts","webpack://opening-quiz/../../src/chessboard/model/arrows/calculate-arrow-rotation.ts","webpack://opening-quiz/../../src/chessboard/model/arrows/get-arrow-color.ts","webpack://opening-quiz/../../src/chessboard/plugins/effects/renderer/model/tuck-marking.ts","webpack://opening-quiz/../../src/chessboard/renderers/model/get-undo-move-details.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/analysis-overlay/index.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/board/types.ts","webpack://opening-quiz/../../src/chessboard/config/board.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/arrows/create-arrow/get-straight-arrow-points.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/arrows/create-arrow/create-straight-arrow.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/arrows/create-arrow/get-knight-arrow-points.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/arrows/create-arrow/create-knight-arrow.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/arrows/create-arrow/index.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/arrows/index.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/assets/style-dom.ts","webpack://opening-quiz/../../src/chessboard/config/is-pseudo-3d.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/assets/index.ts","webpack://opening-quiz/../../src/utils/promise/create-externally-resolvable-promise.ts","webpack://opening-quiz/../../src/chessboard/plugins/effects/renderer/model/is-edge-square.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/board/index.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/coordinates/get-text-nodes/get-text-char.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/coordinates/get-text-nodes/get-coordinates.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/coordinates/get-text-nodes/index.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/coordinates/index.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/fade-setup/index.ts","webpack://opening-quiz/../../src/utils/dom/remove-class-names-starting-with.ts","webpack://opening-quiz/../../src/chessboard/model/board/set-position-by-square.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/hover-square/index.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/move-hints/index.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/highlights/create-check-blinking-highlight.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/piece-movement/animations/types.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/piece-movement/animations/generate-fade-out-steps.ts","webpack://opening-quiz/../../src/chessboard/model/board/get-absolute-file-rank-from-san.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/get-coords-from-square.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/piece-movement/animations/generate-slide-steps.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/piece-movement/animations/index.ts","webpack://opening-quiz/../../src/utils/dom/element-pool/config/constants.ts","webpack://opening-quiz/../../src/utils/dom/element-pool/element-pool.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/piece-movement/types.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/piece-movement/create-piece.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/piece-movement/create-pieces.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/piece-movement/index.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/promotion-window/index.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/highlights/index.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/get-coords-inside-board.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/get-square-inside-board.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/get-pointer-position.ts","webpack://opening-quiz/../../src/chessboard/model/game/get-color-as-number.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/format-pieces-as-object.ts","webpack://opening-quiz/../../src/chessboard/renderers/default/index.ts","webpack://opening-quiz/../../src/chessboard/model/arrows/calculate-arrow-length.ts","webpack://opening-quiz/../../src/chessboard/model/game/get-color-as-letter.ts","webpack://opening-quiz/../../src/chessboard/config/arrows.ts","webpack://opening-quiz/../../src/utils/get-xy-from-event.ts","webpack://opening-quiz/../../src/chessboard/model/board/get-legacy-board-url.ts"],"sourcesContent":["import type { Board } from 'chessboard/model/board/types';\n\n/**\n * Calculate the slope between two points\n */\nexport function calculateArrowSlope({\n  from,\n  to,\n}: {\n  from: Board.Coords;\n  to: Board.Coords;\n}): number {\n  const slope = (from.y - to.y) / (from.x - to.x);\n  const roundedSlope = Number(slope.toFixed(1));\n\n  return roundedSlope;\n}\n","import type { Board } from 'chessboard/model/board/types';\n\n/**\n * Get a fileRank from a SanSquare.\n */\nexport function getFileRankFromSan(san: Board.SanSquare): Board.FileRank {\n  return {\n    file: san.toLowerCase().charCodeAt(0) - 96,\n    rank: Number(san.charAt(1)),\n  };\n}\n","import type { Board } from 'chessboard/model/board/types';\n\n/**\n * Get degrees to rotate knight arrow\n */\nexport function getKnightArrowRotation({\n  from,\n  slope,\n  to,\n}: {\n  from: Board.Coords;\n  slope: number;\n  to: Board.Coords;\n}): number {\n  switch (slope) {\n    case 2:\n      return from.x > to.x ? 180 : 0;\n    case -2:\n      return from.x > to.x ? 0 : 180;\n    case 0.5:\n      return from.x > to.x ? 90 : 270;\n    case -0.5:\n      return from.x > to.x ? 90 : 270;\n    default:\n      return 0;\n  }\n}\n","import type { Board } from 'chessboard/model/board/types';\n\n/**\n * Get a SanSquare from a FileRank.\n */\nexport function getSanFromFileRank(fileRank: Board.FileRank): Board.SanSquare | null {\n  if (\n    !fileRank ||\n    !fileRank.file ||\n    !fileRank.rank ||\n    fileRank.file > 8 ||\n    fileRank.rank > 8 ||\n    fileRank.file < 1 ||\n    fileRank.rank < 1\n  ) {\n    return null;\n  }\n\n  return <Board.SanSquare>`${String.fromCharCode(96 + fileRank.file)}${fileRank.rank.toString()}`;\n}\n","/**\n * Set test data on any element.\n */\nexport function setTestData(\n  el: HTMLElement | SVGSVGElement | SVGPolygonElement,\n  keyVals: KeyVals,\n): boolean {\n  if (!el) {\n    return false;\n  }\n\n  Object.entries(keyVals).forEach(([key, val]) => {\n    const capitalizedKey = `${key.charAt(0).toUpperCase()}${key.slice(1)}`;\n\n    if (typeof val === 'undefined') {\n      delete el.dataset[`test${capitalizedKey}`];\n    } else {\n      el.dataset[`test${capitalizedKey}`] = <string>val;\n    }\n  });\n\n  return true;\n}\n\ninterface KeyVals {\n  [key: string]: string | number | undefined | boolean;\n}\n\nexport enum TestKeys {\n  Anchor = 'anchor',\n  Animated = 'animated',\n  Blinking = 'blinking',\n  Color = 'color',\n  Dragging = 'dragging',\n  Editable = 'editable',\n  Element = 'element',\n  EnPassant = 'enPassant',\n  File = 'file',\n  Figurine = 'figurine',\n  Flipped = 'flipped',\n  IconTextValue = 'iconTextValue',\n  Inside = 'inside',\n  Interval = 'interval',\n  LeadingFigurine = 'leadingFigurine',\n  Opacity = 'opacity',\n  Outside = 'outside',\n  Position = 'position',\n  Rank = 'rank',\n  Selected = 'selected',\n  ShortString = 'shortstring',\n  Square = 'square',\n  Star = 'star',\n  TextColor = 'textColor',\n  TextValue = 'textValue',\n  Times = 'times',\n  TrailingFigurine = 'trailingFigurine',\n  Type = 'type',\n  WholeMoveNumber = 'wholeMoveNumber',\n  X = 'x',\n  Y = 'y',\n}\n\nexport enum TestElements {\n  Arrow = 'arrow',\n  BlinkingHighlight = 'blinking-highlight',\n  Board = 'board',\n  CommentLink = 'comment-link',\n  Coordinates = 'coordinates',\n  CustomItem = 'custom-item',\n  Effect = 'effect',\n  FadeInOverlay = 'fade-in-overlay',\n  GameResult = 'game-result',\n  HalfMove = 'half-move',\n  Highlight = 'highlight',\n  Hint = 'hint',\n  HoverSquare = 'hover-square',\n  Move = 'move',\n  Piece = 'piece',\n  PotentialCapture = 'capture-hint',\n  PromotionCloseButton = 'promotion-close-button',\n  PromotionPiece = 'promotion-piece',\n  PromotionWindow = 'promotion-window',\n  Square = 'square',\n  SiblingBoard = 'sibling-board',\n}\n","import type { Board } from 'chessboard/model/board/types';\nimport { calculateArrowLength } from 'chessboard/model/arrows/calculate-arrow-length';\n\n/**\n * Get the angle to rotate the arrow\n */\nexport function calculateArrowRotation({\n  from,\n  to,\n}: {\n  from: Board.Coords;\n  to: Board.Coords;\n}): number {\n  const length = calculateArrowLength({ from, to });\n\n  // arrows point straight down before they get rotated. So we need to calculate\n  // the coordinates of the original `to` point from before the arrow is rotated.\n  const originalTo = {\n    x: from.x,\n    y: from.y + length,\n  };\n\n  // arrow before rotation\n  const vector1 = {\n    x: from.x - originalTo.x,\n    y: from.y - originalTo.y,\n  };\n\n  // arrow after rotation\n  const vector2 = {\n    x: from.x - to.x,\n    y: from.y - to.y,\n  };\n\n  // calculate the angle between the two vectors\n  const cosine = (vector1.x * vector2.x + vector1.y * vector2.y) / length ** 2;\n  const clampedCosine = Math.max(-1, Math.min(1, cosine));\n  const radians = Math.acos(clampedCosine);\n\n  // convert to degrees and round to 100th\n  const degrees = Math.floor(radians * (180 / Math.PI) * 100) / 100;\n\n  return from.x < to.x ? 360 - degrees : degrees;\n}\n","import type { Board } from 'chessboard/model/board/types';\nimport { Game } from 'chessboard/model/game/types';\n\n/**\n * Get the color for an arrow. First choice is one of the color options, like alt\n * or shift. Next is custom color. Last is the default color option.\n */\nexport function getArrowColor(\n  color: Game.Node.Marking.Arrow.Model['color'],\n  colorOptions: Board.ArrowColors,\n): string {\n  return (\n    (color && colorOptions[Game.Node.Marking.JCEColorsMap[color]]) ?? color ?? colorOptions.default\n  );\n}\n","import type { Board } from 'chessboard/model/board/types';\n\n/**\n * Ensures effect element is within the chessboard.\n */\nexport function tuckMarking({\n  square,\n  isFlipped,\n  effectEl,\n}: {\n  square: Board.SanSquare;\n  isFlipped: boolean;\n  effectEl: HTMLDivElement;\n}): void {\n  const tuckPosition = getTuckPosition(square, isFlipped);\n\n  if (tuckPosition.top) {\n    effectEl.classList.add('tuck-top');\n  }\n\n  if (tuckPosition.right) {\n    effectEl.classList.add('tuck-right');\n  }\n}\n\nexport type TuckInfo = {\n  top: boolean;\n  right: boolean;\n};\n\n/**\n * Find available tuck position.\n */\nexport function getTuckPosition(square: Board.SanSquare, isFlipped: boolean): TuckInfo {\n  const sides = {\n    top: isFlipped ? '1' : '8',\n    right: isFlipped ? 'a' : 'h',\n  };\n\n  return {\n    top: square.includes(sides.top),\n    right: square.includes(sides.right),\n  };\n}\n","import type { Board } from 'chessboard/model/board/types';\nimport type { Game } from 'chessboard/model/game/types';\nimport { getOppositeColor } from 'chessboard/model/game/get-opposite-color';\nimport { nodeTargetSquare } from 'api/move/model/node-target-square';\n\n/**\n * Get the details required for undoing a move.\n */\nexport function getUndoMoveDetails(move: Game.Move.ExtendedNode): {\n  movedPieces: Game.Move.Undo[];\n  promotedSquare?: Board.SanSquare;\n  restoredPiece?: Game.Piece.Model;\n} {\n  const movedPieces: Game.Move.Undo[] = [\n    {\n      animate: move.animate,\n      from: nodeTargetSquare(move),\n      to: <Board.SanSquare>move.from,\n    },\n  ];\n\n  if (move.rookMove) {\n    movedPieces.push({\n      ...move.rookMove,\n      from: move.rookMove.to,\n      to: move.rookMove.from,\n    });\n  }\n\n  const restoredPiece =\n    move.captured && move.capturedStr\n      ? {\n          color: getOppositeColor(move.color),\n          promoted: move.capturedPromotedPawn,\n          square: move.EPCapturedSquare || move.to,\n          type: <Game.Piece.ShortStrings.Black>move.capturedStr.toLowerCase(),\n        }\n      : undefined;\n\n  return {\n    movedPieces,\n    promotedSquare: move.promotion ? <Board.SanSquare>move.from : undefined,\n    restoredPiece: <Game.Piece.Model>restoredPiece,\n  };\n}\n","import 'chessboard/renderers/default/analysis-overlay/style.scss';\nimport type { BoardDOM } from 'chessboard/renderers/default/board/types';\n\n/**\n * Create analysis overlay.\n */\nexport function createAnalysisOverlayMethods({ board }: { board: BoardDOM }) {\n  const { classList } = board.el;\n\n  return {\n    addAnalysisOverlay,\n    removeAnalysisOverlay,\n  };\n\n  /**\n   * Add addAnalysisOverlay.\n   */\n  function addAnalysisOverlay() {\n    classList.add('analysis-overlay');\n  }\n\n  /**\n   * Add removeAnalysisOverlay.\n   */\n  function removeAnalysisOverlay() {\n    classList.remove('analysis-overlay');\n  }\n}\n","import type { Board } from 'chessboard/model/board/types';\nimport type { Core } from 'chessboard/core/config/types';\nimport type { Renderer } from 'chessboard/renderers/config/types';\n\nexport interface FromToCoords {\n  fromCoords: Board.Coords | undefined;\n  toCoords: Board.Coords | undefined;\n}\nexport interface BoardDOM {\n  animationComplete: Renderer.Model['animationComplete'];\n  addToDom: ({\n    type,\n    el,\n    insertAfter,\n  }: {\n    type: BoardPlaceholders;\n    el: Comment | HTMLElement | SVGSVGElement;\n    insertAfter?: boolean;\n  }) => void;\n  el: HTMLElement;\n  flipBoard: (shouldFlip: boolean, context?: Core.Context) => void;\n  setBoardEnabled: (enabled: boolean) => void;\n  isAnimating: Renderer.Model['isAnimating'];\n  isFlipped: () => boolean;\n  reset: () => void;\n  placeholders: { [key in BoardPlaceholders]: Comment };\n  setAnimatingStatus: (isAnimating: boolean) => void;\n}\n\nexport enum BoardPlaceholders {\n  Arrows = 'arrows',\n  BlinkingHighlights = 'blinking-highlights',\n  CaptureHints = 'capture-hints',\n  Coordinates = 'coordinates',\n  Effects = 'effects',\n  FadeSetup = 'fade-setup',\n  HoverSquare = 'hover-square',\n  MoveHints = 'move-hints',\n  Pieces = 'pieces',\n  PromotionWindow = 'promotion-window',\n  Squares = 'squares',\n}\n","/**\n * SVG coordinates for the center of each square (Board not flipped)\n */\nexport const squareCoordinates = {\n  a1: { x: 6.25, y: 93.75 },\n  a2: { x: 6.25, y: 81.25 },\n  a3: { x: 6.25, y: 68.75 },\n  a4: { x: 6.25, y: 56.25 },\n  a5: { x: 6.25, y: 43.75 },\n  a6: { x: 6.25, y: 31.25 },\n  a7: { x: 6.25, y: 18.75 },\n  a8: { x: 6.25, y: 6.25 },\n  b1: { x: 18.75, y: 93.75 },\n  b2: { x: 18.75, y: 81.25 },\n  b3: { x: 18.75, y: 68.75 },\n  b4: { x: 18.75, y: 56.25 },\n  b5: { x: 18.75, y: 43.75 },\n  b6: { x: 18.75, y: 31.25 },\n  b7: { x: 18.75, y: 18.75 },\n  b8: { x: 18.75, y: 6.25 },\n  c1: { x: 31.25, y: 93.75 },\n  c2: { x: 31.25, y: 81.25 },\n  c3: { x: 31.25, y: 68.75 },\n  c4: { x: 31.25, y: 56.25 },\n  c5: { x: 31.25, y: 43.75 },\n  c6: { x: 31.25, y: 31.25 },\n  c7: { x: 31.25, y: 18.75 },\n  c8: { x: 31.25, y: 6.25 },\n  d1: { x: 43.75, y: 93.75 },\n  d2: { x: 43.75, y: 81.25 },\n  d3: { x: 43.75, y: 68.75 },\n  d4: { x: 43.75, y: 56.25 },\n  d5: { x: 43.75, y: 43.75 },\n  d6: { x: 43.75, y: 31.25 },\n  d7: { x: 43.75, y: 18.75 },\n  d8: { x: 43.75, y: 6.25 },\n  e1: { x: 56.25, y: 93.75 },\n  e2: { x: 56.25, y: 81.25 },\n  e3: { x: 56.25, y: 68.75 },\n  e4: { x: 56.25, y: 56.25 },\n  e5: { x: 56.25, y: 43.75 },\n  e6: { x: 56.25, y: 31.25 },\n  e7: { x: 56.25, y: 18.75 },\n  e8: { x: 56.25, y: 6.25 },\n  f1: { x: 68.75, y: 93.75 },\n  f2: { x: 68.75, y: 81.25 },\n  f3: { x: 68.75, y: 68.75 },\n  f4: { x: 68.75, y: 56.25 },\n  f5: { x: 68.75, y: 43.75 },\n  f6: { x: 68.75, y: 31.25 },\n  f7: { x: 68.75, y: 18.75 },\n  f8: { x: 68.75, y: 6.25 },\n  g1: { x: 81.25, y: 93.75 },\n  g2: { x: 81.25, y: 81.25 },\n  g3: { x: 81.25, y: 68.75 },\n  g4: { x: 81.25, y: 56.25 },\n  g5: { x: 81.25, y: 43.75 },\n  g6: { x: 81.25, y: 31.25 },\n  g7: { x: 81.25, y: 18.75 },\n  g8: { x: 81.25, y: 6.25 },\n  h1: { x: 93.75, y: 93.75 },\n  h2: { x: 93.75, y: 81.25 },\n  h3: { x: 93.75, y: 68.75 },\n  h4: { x: 93.75, y: 56.25 },\n  h5: { x: 93.75, y: 43.75 },\n  h6: { x: 93.75, y: 31.25 },\n  h7: { x: 93.75, y: 18.75 },\n  h8: { x: 93.75, y: 6.25 },\n};\n","import { arrowStyles } from 'chessboard/config/arrows';\nimport type { Board } from 'chessboard/model/board/types';\nimport { calculateArrowLength } from 'chessboard/model/arrows/calculate-arrow-length';\n\nconst halfArrowWidth = arrowStyles.WIDTH / 2;\nconst arrowHeadHeight = arrowStyles.HEAD_HEIGHT;\nconst tailPadding = arrowStyles.TAIL_PADDING;\nconst halfArrowHeadWidth = arrowStyles.HEAD_WIDTH / 2;\n\n/**\n * Get the point value for the SVG polygon points attribute\n */\nexport function getStraightArrowPoints({\n  from,\n  to,\n}: {\n  from: Board.Coords;\n  to: Board.Coords;\n}): string {\n  const length = calculateArrowLength({ from, to });\n\n  return `\n    ${from.x - halfArrowWidth} ${from.y + tailPadding},\n    ${from.x - halfArrowWidth} ${from.y + length - arrowHeadHeight},\n    ${from.x - halfArrowHeadWidth} ${from.y + length - arrowHeadHeight},\n    ${from.x} ${from.y + length},\n    ${from.x + halfArrowHeadWidth} ${from.y + length - arrowHeadHeight},\n    ${from.x + halfArrowWidth} ${from.y + length - arrowHeadHeight},\n    ${from.x + halfArrowWidth} ${from.y + tailPadding}\n  `.trim();\n}\n","import type { Board } from 'chessboard/model/board/types';\nimport { calculateArrowRotation } from 'chessboard/model/arrows/calculate-arrow-rotation';\nimport { getStraightArrowPoints } from 'chessboard/renderers/default/arrows/create-arrow/get-straight-arrow-points';\n\n/**\n * Create a default arrow\n */\nexport function createStraightArrow({\n  from,\n  polygon,\n  to,\n}: {\n  from: Board.Coords;\n  polygon: SVGPolygonElement;\n  to: Board.Coords;\n}): SVGPolygonElement {\n  const arrowRotation = calculateArrowRotation({ from, to });\n\n  polygon.setAttribute('transform', `rotate(${arrowRotation} ${from.x} ${from.y})`);\n  polygon.setAttribute('points', getStraightArrowPoints({ from, to }));\n\n  return polygon;\n}\n","import { arrowStyles } from 'chessboard/config/arrows';\nimport type { Board } from 'chessboard/model/board/types';\n\nconst halfArrowWidth = arrowStyles.WIDTH / 2;\nconst arrowHeadHeight = arrowStyles.HEAD_HEIGHT;\nconst tailPadding = arrowStyles.TAIL_PADDING;\nconst halfArrowHeadWidth = arrowStyles.HEAD_WIDTH / 2;\n\n/**\n * Get the point value for the SVG polygon points attribute\n */\nexport function getKnightArrowPoints({ from }: { from: Board.Coords }): string {\n  return `\n    ${from.x - halfArrowWidth} ${from.y + tailPadding},\n    ${from.x - halfArrowWidth} ${from.y + 25 + halfArrowWidth},\n    ${from.x + 12.5 - arrowHeadHeight} ${from.y + 25 + halfArrowWidth},\n    ${from.x + 12.5 - arrowHeadHeight} ${from.y + 25 + halfArrowHeadWidth},\n    ${from.x + 12.5} ${from.y + 25},\n    ${from.x + 12.5 - arrowHeadHeight} ${from.y + 25 - halfArrowHeadWidth},\n    ${from.x + 12.5 - arrowHeadHeight} ${from.y + 25 - halfArrowWidth},\n    ${from.x + halfArrowWidth} ${from.y + 25 - halfArrowWidth},\n    ${from.x + halfArrowWidth} ${from.y + tailPadding}\n  `.trim();\n}\n","import type { Board } from 'chessboard/model/board/types';\nimport { flippedKnightArrowSlopes } from 'chessboard/config/arrows';\nimport { getKnightArrowPoints } from 'chessboard/renderers/default/arrows/create-arrow/get-knight-arrow-points';\nimport { getKnightArrowRotation } from 'chessboard/model/arrows/get-knight-arrow-rotation';\n\n/**\n * Create a default arrow\n */\nexport function createKnightArrow({\n  from,\n  polygon,\n  slope,\n  to,\n}: {\n  from: Board.Coords;\n  polygon: SVGPolygonElement;\n  slope: number;\n  to: Board.Coords;\n}): SVGPolygonElement {\n  let transform = `rotate(${getKnightArrowRotation({ from, slope, to })} ${from.x} ${from.y})`;\n\n  if (flippedKnightArrowSlopes.includes(slope)) {\n    transform += ` scale(-1, 1) translate(-${2 * from.x}, 0)`;\n  }\n\n  polygon.setAttribute('transform', transform);\n  polygon.setAttribute('points', getKnightArrowPoints({ from }));\n\n  return polygon;\n}\n","import { calculateArrowLength } from 'chessboard/model/arrows/calculate-arrow-length';\nimport { calculateArrowSlope } from 'chessboard/model/arrows/calculate-arrow-slope';\nimport type { Core } from 'chessboard/core/config/types';\nimport { squareCoordinates } from 'chessboard/config/board';\nimport { KNIGHT_ARROW_LENGTH, validKnightArrowSlopes } from 'chessboard/config/arrows';\nimport { createStraightArrow } from 'chessboard/renderers/default/arrows/create-arrow/create-straight-arrow';\nimport { createKnightArrow } from 'chessboard/renderers/default/arrows/create-arrow/create-knight-arrow';\nimport { getArrowColor } from 'chessboard/model/arrows/get-arrow-color';\nimport type { KeyedArrow } from 'chessboard/plugins/arrows/config/types';\n\n/**\n * Create arrows\n */\nexport function createArrow(\n  arrow: KeyedArrow,\n  context: Core.Context,\n): SVGPolygonElement | undefined {\n  if (!arrow.key) {\n    return;\n  }\n\n  const { color, from: fromSan, opacity, to: toSan } = arrow.data;\n\n  const polygon = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');\n\n  polygon.setAttribute('id', `arrow-${fromSan}${toSan}`);\n  polygon.setAttribute('data-arrow', `${fromSan}${toSan}`);\n  polygon.setAttribute('class', 'arrow');\n\n  const { arrowColors } = context.options;\n\n  polygon.style.fill = getArrowColor(color, arrowColors);\n\n  if (opacity) {\n    polygon.style.opacity = String(opacity);\n  }\n\n  const from = squareCoordinates[fromSan];\n  const to = squareCoordinates[toSan];\n\n  if (!from || !to) {\n    return;\n  }\n\n  const length = calculateArrowLength({ from, to });\n  const slope = calculateArrowSlope({ from, to });\n\n  if (validKnightArrowSlopes.includes(slope) && length === KNIGHT_ARROW_LENGTH) {\n    return createKnightArrow({ from, polygon, slope, to });\n  }\n\n  return createStraightArrow({ from, polygon, to });\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport 'chessboard/renderers/default/arrows/style.scss';\nimport type { BoardDOM } from 'chessboard/renderers/default/board/types';\nimport { BoardPlaceholders } from 'chessboard/renderers/default/board/types';\nimport type { Core } from 'chessboard/core/config/types';\nimport { createArrow } from 'chessboard/renderers/default/arrows/create-arrow';\nimport type { KeyedArrow } from 'chessboard/plugins/arrows/config/types';\n\n/**\n * Handlers related to arrows.\n */\nexport function createArrowsMethods({ board }: { board: BoardDOM }) {\n  const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n\n  svg.setAttribute('viewBox', '0 0 100 100');\n  svg.classList.add('arrows');\n\n  board.addToDom({ el: svg, type: BoardPlaceholders.Arrows });\n\n  const arrowElements: Map<string, SVGPolygonElement> = new Map();\n\n  return {\n    addArrows,\n    removeArrows,\n  };\n\n  /**\n   * Add arrows to the DOM.\n   */\n  function addArrows(arrows: KeyedArrow[], context: Core.Context) {\n    arrows.forEach((arrow) => {\n      const arrowToAdd = createArrow(arrow, context);\n\n      if (arrowToAdd) {\n        svg.appendChild(arrowToAdd);\n        arrowElements.set(arrow.key, arrowToAdd);\n      }\n    });\n  }\n\n  /**\n   * Remove arrows from the DOM.\n   */\n  function removeArrows(arrows: KeyedArrow[]) {\n    arrows.forEach((arrow) => {\n      const { key } = arrow;\n      const arrowEl = arrowElements.get(key);\n\n      if (!arrowEl) {\n        return;\n      }\n\n      svg.removeChild(arrowEl);\n      arrowElements.delete(key);\n    });\n  }\n}\n","import type { Board } from 'chessboard/model/board/types';\nimport type { LegacyThemes } from 'chessboard/config/legacy-themes';\nimport {\n  defaultLegacyBoardStyles,\n  defaultLegacyPieceStyles,\n  shortPieceNames,\n} from 'chessboard/config/legacy-themes';\nimport { getLegacyBoardURL } from 'chessboard/model/board/get-legacy-board-url';\nimport { getLegacyPieceBaseURL } from 'chessboard/model/board/get-legacy-piece-base-url';\nimport defaultPiecesBase64 from 'chessboard/renderers/default/assets/default-pieces-base64.json';\nimport { ThemeAssets } from 'chessboard/config/theme-assets';\n\nconst TRANSITION_DURATION_MS = 300;\nexport const TRANSITION_STYLE = `transition: background-image ${TRANSITION_DURATION_MS}ms linear;`;\n\n/**\n * Create the DOM for the style tag and expose an API for it.\n */\nexport function createStyleDOM({\n  boardStyles,\n  options,\n  pieceStyles,\n}: {\n  boardStyles: LegacyThemes.BoardStyles;\n  options: Board.Options<ThemeAssets.Assets2D>;\n  pieceStyles: LegacyThemes.PieceStyles;\n}) {\n  updateStyles(options);\n\n  return {\n    destroy,\n    getStyleEl,\n    getPieceStyles: () => pieceStyles,\n    updateStyles,\n  };\n\n  /**\n   * Remove style tag.\n   */\n  function destroy(): void {\n    const styleEl = document.getElementById(getStyleId());\n\n    if (!styleEl || !styleEl.parentNode) {\n      return;\n    }\n\n    styleEl.parentNode.removeChild(styleEl);\n  }\n\n  /**\n   * Gets the style element itself.\n   */\n  function getStyleEl(): HTMLElement | null {\n    return document.getElementById(getStyleId());\n  }\n\n  /**\n   * Get the id for the style tag for this board.\n   */\n  function getStyleId(): string {\n    return options.useSharedStyleTag ? 'board-styles-shared' : `board-styles-${<string>options.id}`;\n  }\n\n  /**\n   * Generate the styles for the board, ready to be inserted into the style tag.\n   * Relies on legacy boardStyle and pieceStyle options\n   */\n  function getLegacyStyleInnerHTML(opts: Board.Options, fallback = false): string {\n    const { boardStyle, id, pieceStyle } = opts;\n    const { path, format, isPseudo3d } = pieceStyles[pieceStyle] ?? defaultLegacyPieceStyles.neo;\n    const pieceBaseUrl = getLegacyPieceBaseURL(path, undefined, opts);\n    const boardTheme = boardStyles[boardStyle] ?? defaultLegacyBoardStyles.green;\n    const pseudoElement = isPseudo3d ? '::after' : '';\n\n    const pieceStylesString = !fallback\n      ? shortPieceNames.reduce(\n          (acc, shortString) =>\n            `${acc}#board-${id} .piece.${shortString}${pseudoElement}, #board-${id} .promotion-piece.${shortString}${pseudoElement} {\n            background-image: url('${pieceBaseUrl}/${shortString}.${format}');\n          }`,\n          '',\n        )\n      : shortPieceNames.reduce(\n          (acc, shortString) =>\n            `${acc}#board-${id} .piece.${shortString}, #board-${id} .promotion-piece.${shortString} {\n            background-image: url('${defaultPiecesBase64[shortString]}');\n          }`,\n          '',\n        );\n\n    const boardStylesString = `\n      #board-${id}, .fade-in-overlay {\n        background-image: url('${getLegacyBoardURL(boardTheme[2], undefined, opts)}');\n      }\n      .coordinate-light {\n        fill: ${boardTheme[0]};\n      }\n      .coordinate-dark {\n        fill: ${boardTheme[1]};\n      }\n      .highlight {\n        background-color: ${boardTheme[4]};\n      }\n    `;\n\n    const transitionStyles = `#board-${id}, #board-${id} .piece {\n      ${TRANSITION_STYLE}\n    }`;\n\n    return boardStylesString + pieceStylesString + transitionStyles;\n  }\n\n  /**\n   * Generate the styles for the board, ready to be inserted into the style tag.\n   */\n  function getStyleInnerHTML(opts: Board.Options<ThemeAssets.Assets2D>, fallback = false): string {\n    const { id, themeAssets } = opts;\n    if (!themeAssets) {\n      return getLegacyStyleInnerHTML(opts, fallback);\n    }\n\n    const pseudoElement =\n      themeAssets.config.perspective === ThemeAssets.Perspective.PSEUDO_3D ? '::after' : '';\n\n    const pieceStylesString = Object.keys(themeAssets.pieces.assets).reduce(\n      (acc, pieceString) =>\n        `${acc}#board-${id} .piece.${pieceString}${pseudoElement}, #board-${id} .promotion-piece.${pieceString}${pseudoElement} {\n        background-image: url('${themeAssets.pieces.assets[pieceString]}');\n      }`,\n      '',\n    );\n\n    const boardStylesString = `\n      #board-${id}, .fade-in-overlay {\n        background-image: url('${themeAssets.board.assets.background}');\n      }\n      .coordinate-light {\n        fill: ${themeAssets.board.config.lightSquareCoordinateHex};\n      }\n      .coordinate-dark {\n        fill: ${themeAssets.board.config.darkSquareCoordinateHex};\n      }\n      .highlight {\n        background-color: ${themeAssets.board.config.highlightSquareHex};\n      }\n    `;\n\n    const transitionStyles = `#board-${id}, #board-${id} .piece {\n      ${TRANSITION_STYLE}\n    }`;\n\n    return boardStylesString + pieceStylesString + transitionStyles;\n  }\n\n  /**\n   * Update the style tag according to the current options. Creates the style\n   * tag if it doesn't exist.\n   */\n  function updateStyles(opts: Board.Options<ThemeAssets.Assets2D>, fallback = false): void {\n    const styleId = getStyleId();\n    let styleEl = getStyleEl();\n\n    if (!styleEl) {\n      styleEl = document.createElement('style');\n\n      (<HTMLStyleElement>styleEl).type = 'text/css';\n      styleEl.id = styleId;\n\n      const head = (<HTMLDocument>document).head;\n\n      if (head) {\n        head.appendChild(styleEl);\n      }\n    }\n\n    const themeStyles = getStyleInnerHTML(opts, fallback);\n\n    if (styleEl.innerHTML !== themeStyles) {\n      styleEl.innerHTML = themeStyles;\n\n      // Remove transition styles after animation is complete.\n      // Context: piece elements are reused on position change\n      // and we only want a transition animation when updating the theme.\n      setTimeout(() => {\n        if (!styleEl) {\n          return;\n        }\n        styleEl.innerHTML = styleEl.innerHTML.replace(TRANSITION_STYLE, '');\n      }, TRANSITION_DURATION_MS + 50);\n    }\n  }\n}\n","import { ThemeAssets } from 'chessboard/config/theme-assets';\nimport type { Board } from 'chessboard/model/board/types';\nimport { defaultLegacyPieceStyles } from './legacy-themes';\nimport type { LegacyThemes } from './legacy-themes';\n\n/**\n * Determine if piece style is pseudo 3d for default renderer.\n */\nexport function isPseudo3d(\n  boardOptions: Board.Options,\n  pieceStyles: LegacyThemes.PieceStyles = defaultLegacyPieceStyles,\n): boolean {\n  const result = boardOptions.themeAssets\n    ? boardOptions.themeAssets.config.perspective === ThemeAssets.Perspective.PSEUDO_3D\n    : pieceStyles[boardOptions.pieceStyle].isPseudo3d;\n\n  return Boolean(result);\n}\n","import type { Board } from 'chessboard/model/board/types';\nimport type { Core } from 'chessboard/core/config/types';\nimport { createStyleDOM } from 'chessboard/renderers/default/assets/style-dom';\nimport type { LegacyThemes } from 'chessboard/config/legacy-themes';\nimport { BoardClasses } from 'chessboard/renderers/config/types';\nimport type { ThemeAssets } from 'chessboard/config/theme-assets';\nimport { validateBoardOptions2D } from 'chessboard/config/theme-validation-utils';\nimport { isPseudo3d } from 'chessboard/config/is-pseudo-3d';\n\n/**\n * Handlers related to assets.\n */\nexport function createAssetsMethods({\n  boardStyles,\n  el,\n  options,\n  pieceStyles,\n}: {\n  boardStyles: LegacyThemes.BoardStyles;\n  el: HTMLElement;\n  options: Board.Options<ThemeAssets.Assets2D>;\n  pieceStyles: LegacyThemes.PieceStyles;\n}) {\n  const styleDOM = createStyleDOM({ boardStyles, options, pieceStyles });\n\n  return {\n    destroy,\n    updateBoardImage,\n    updatePieceBaseImage,\n    togglePseudo3d,\n    getPieceStyles: styleDOM.getPieceStyles,\n  };\n\n  /**\n   * Destroy style DOM.\n   */\n  function destroy(): void {\n    styleDOM.destroy();\n  }\n\n  /**\n   * Set the contents of the style tag according to the current options.\n   */\n  function updateBoardImage(context: Core.Context): void {\n    styleDOM.updateStyles(validateBoardOptions2D(context.options));\n  }\n\n  /**\n   * Set the contents of the style tag according to the current options.\n   */\n  function updatePieceBaseImage(context: Core.Context, fallback = false): void {\n    togglePseudo3d(context.options);\n\n    styleDOM.updateStyles(validateBoardOptions2D(context.options), fallback);\n  }\n\n  /**\n   * Toggle pseudo 3d class on board element depending on piece style.\n   */\n  function togglePseudo3d(boardOptions: Board.Options): void {\n    const showClass = isPseudo3d(boardOptions, pieceStyles);\n\n    el.classList.toggle(BoardClasses.Pseudo3d, showClass);\n  }\n}\n","import type { ExternallyResolvablePromise, PromiseResolveReject } from 'utils/promise/config/types';\n\n/**\n * Create the promise object, externalizing the reject() and resolve()\n * functions so that they can be called from without the Promise.\n *\n * @example\n * ```ts\n * const { promise, resolve } = createExternallyResolvablePromise();\n *\n * promise.then(result => { ... });\n *\n * resolve([data]);\n * ```\n */\nexport function createExternallyResolvablePromise<T>(): ExternallyResolvablePromise<T> {\n  let res: PromiseResolveReject;\n  let rej: PromiseResolveReject;\n\n  return {\n    promise: new Promise((resolve, reject) => {\n      res = resolve;\n      rej = reject;\n    }),\n    reject: rej,\n    resolve: res,\n  };\n}\n","import type { Board } from 'chessboard/model/board/types';\n\n/**\n * Determines if a square is on the edge of the board\n */\nexport function isEdgeSquare(square: Board.SanSquare): boolean {\n  if (!square) {\n    return false;\n  }\n\n  const edgeValues = ['a', 'h', '1', '8'];\n  let isEdge = false;\n\n  edgeValues.forEach((value) => {\n    if (square.includes(value)) {\n      isEdge = true;\n    }\n  });\n\n  return isEdge;\n}\n","import 'chessboard/renderers/default/coordinates/style.scss';\nimport type { Renderer } from 'chessboard/renderers/config/types';\nimport { AnimationTypes, BoardClasses } from 'chessboard/renderers/config/types';\nimport type { Board } from 'chessboard/model/board/types';\nimport type { BoardDOM } from 'chessboard/renderers/default/board/types';\nimport { BoardPlaceholders } from 'chessboard/renderers/default/board/types';\nimport type { Core } from 'chessboard/core/config/types';\nimport type { KeyedEffect } from 'chessboard/plugins/effects/config/types';\nimport { EffectType } from 'chessboard/plugins/effects/config/types';\nimport { setTestData, TestElements, TestKeys } from 'src/utils/set-test-data';\nimport { createExternallyResolvablePromise } from 'src/utils/promise/create-externally-resolvable-promise';\nimport { isEdgeSquare } from 'chessboard/plugins/effects/renderer/model/is-edge-square';\nimport { tuckMarking } from 'chessboard/plugins/effects/renderer/model/tuck-marking';\n\n/**\n * Add placeholders to the board and provide a function to add elements\n * into the correct place in the DOM.\n */\nexport function createBoard({\n  el,\n  options,\n  testElement = TestElements.Board,\n}: {\n  el: HTMLElement;\n  options: Board.Options;\n  testElement?: TestElements;\n}): BoardDOM {\n  const placeholders = {\n    [BoardPlaceholders.Coordinates]: document.createComment('/Coordinates'),\n    [BoardPlaceholders.Squares]: document.createComment('/Squares'),\n    [BoardPlaceholders.BlinkingHighlights]: document.createComment('/Blinking Highlights'),\n    [BoardPlaceholders.Effects]: document.createComment('/Effects'),\n    [BoardPlaceholders.HoverSquare]: document.createComment('/Hover Square'),\n    [BoardPlaceholders.Pieces]: document.createComment('/Pieces'),\n    [BoardPlaceholders.MoveHints]: document.createComment('/MoveHints'),\n    [BoardPlaceholders.CaptureHints]: document.createComment('/Capture Hints'),\n    [BoardPlaceholders.Arrows]: document.createComment('/Arrows'),\n    [BoardPlaceholders.PromotionWindow]: document.createComment('/Promotion Window'),\n    [BoardPlaceholders.FadeSetup]: document.createComment('/Fade Setup'),\n  };\n\n  // Append placeholders\n  Object.values(placeholders).forEach((placeholder) => el.appendChild(placeholder));\n\n  let animationCompleteResolvablePromise = createExternallyResolvablePromise<boolean>();\n  animationCompleteResolvablePromise.resolve?.(true);\n\n  if (options.test) {\n    setTestData(el, {\n      [TestKeys.Element]: testElement,\n    });\n  }\n\n  return {\n    addToDom,\n    animationComplete,\n    el,\n    flipBoard,\n    setBoardEnabled,\n    isAnimating,\n    isFlipped,\n    placeholders,\n    setAnimatingStatus,\n    reset,\n  };\n\n  /**\n   * Helper function to add an element into the correct place in the DOM.\n   */\n  function addToDom({\n    type,\n    el: element,\n    insertAfter = false,\n  }: {\n    type: BoardPlaceholders;\n    el: Comment | HTMLElement | SVGSVGElement;\n    insertAfter?: boolean;\n  }): void {\n    if (insertAfter) {\n      el.insertBefore(element, placeholders[type].nextSibling);\n    } else {\n      el.insertBefore(element, placeholders[type]);\n    }\n  }\n\n  /**\n   * Flip the board.\n   */\n  function flipBoard(shouldFlip: boolean, context?: Core.Context): void {\n    el.classList.toggle(BoardClasses.Flipped, shouldFlip);\n\n    if (context?.options.allowMarkings) {\n      const effects = context.api.markings.getAllWhere({ types: [EffectType] });\n\n      if (effects.length > 0) {\n        updateTuckedEffects(effects, context.renderer);\n      }\n    }\n  }\n\n  /**\n   * Reset board\n   */\n  function reset(): void {\n    el.innerHTML = '';\n    el.classList.remove(BoardClasses.Flipped);\n  }\n\n  /**\n   * Update effects that have been tucked.\n   */\n  function updateTuckedEffects(effects: KeyedEffect[], renderer: Renderer.Model | undefined) {\n    effects.forEach((effect) => {\n      const {\n        data: { square },\n        key,\n      } = effect;\n      const effectEl = renderer?.getEffectElements?.().get(key);\n\n      if (!effectEl) {\n        return;\n      }\n\n      effectEl.forEach((effEl) => {\n        if (effEl.classList.contains('tuck-right') || effEl.classList.contains('tuck-top')) {\n          effEl.classList.remove('tuck-right');\n          effEl.classList.remove('tuck-top');\n        }\n      });\n\n      if (isEdgeSquare(square)) {\n        effectEl.forEach((effEl) => {\n          tuckMarking({\n            square,\n            isFlipped: el.classList.contains('flipped'),\n            effectEl: effEl,\n          });\n        });\n      }\n    });\n  }\n\n  /**\n   * Empty function.\n   */\n  function setBoardEnabled(): void {}\n\n  /**\n   * Determine whether or not the board is in an animating state.\n   */\n  function isAnimating(): boolean {\n    return Boolean(el.dataset.testAnimating);\n  }\n\n  /**\n   * Return a promise that will resolve when an animation is complete.\n   */\n  function animationComplete(animationType: AnimationTypes): Promise<void | boolean> {\n    if (![AnimationTypes.All, AnimationTypes.Move].includes(animationType)) {\n      return Promise.resolve(true);\n    }\n\n    return animationCompleteResolvablePromise.promise;\n  }\n\n  /**\n   * Returns true if the board is flipped.\n   */\n  function isFlipped(): boolean {\n    return options.flipped;\n  }\n\n  /**\n   * Set the animating status.\n   */\n  function setAnimatingStatus(isInAnimatingState: boolean): void {\n    if (!isInAnimatingState) {\n      delete el.dataset.testAnimating;\n      animationCompleteResolvablePromise.resolve?.(true);\n    } else {\n      el.dataset.testAnimating = 'true';\n      animationCompleteResolvablePromise = createExternallyResolvablePromise<boolean>();\n    }\n  }\n}\n","/**\n * Get the text as an array.\n */\nexport function getTextChar(flipped: boolean) {\n  const text = ['8', '7', '6', '5', '4', '3', '2', '1', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n\n  if (flipped) {\n    return [...text.slice(0, 8).reverse(), ...text.slice(-8).reverse()];\n  }\n\n  return text;\n}\n","import { Board } from 'chessboard/model/board/types';\n\n/**\n * Get coordinates positions\n */\nexport function getCoordinates(position: Board.CoordinatesPositions) {\n  if (position === Board.CoordinatesPositions.Outside) {\n    return [\n      { color: 'grey', fontSize: 3.1, x: 2, y: 3.5 },\n      { color: 'grey', fontSize: 3.1, x: 2, y: 16 },\n      { color: 'grey', fontSize: 3.1, x: 2, y: 28.5 },\n      { color: 'grey', fontSize: 3.1, x: 2, y: 41 },\n      { color: 'grey', fontSize: 3.1, x: 2, y: 53.5 },\n      { color: 'grey', fontSize: 3.1, x: 2, y: 66 },\n      { color: 'grey', fontSize: 3.1, x: 2, y: 78.5 },\n      { color: 'grey', fontSize: 3.1, x: 2, y: 91 },\n      { color: 'grey', fontSize: 3.1, x: 10.35, y: 99.25 },\n      { color: 'grey', fontSize: 3.1, x: 22.85, y: 99.25 },\n      { color: 'grey', fontSize: 3.1, x: 35.35, y: 99.25 },\n      { color: 'grey', fontSize: 3.1, x: 47.85, y: 99.25 },\n      { color: 'grey', fontSize: 3.1, x: 60.35, y: 99.25 },\n      { color: 'grey', fontSize: 3.1, x: 72.85, y: 99.25 },\n      { color: 'grey', fontSize: 3.1, x: 85.35, y: 99.25 },\n      { color: 'grey', fontSize: 3.1, x: 97.85, y: 99.25 },\n    ];\n  }\n\n  return [\n    { color: 'light', fontSize: 2.8, x: 0.75, y: 3.5 },\n    { color: 'dark', fontSize: 2.8, x: 0.75, y: 15.75 },\n    { color: 'light', fontSize: 2.8, x: 0.75, y: 28.25 },\n    { color: 'dark', fontSize: 2.8, x: 0.75, y: 40.75 },\n    { color: 'light', fontSize: 2.8, x: 0.75, y: 53.25 },\n    { color: 'dark', fontSize: 2.8, x: 0.75, y: 65.75 },\n    { color: 'light', fontSize: 2.8, x: 0.75, y: 78.25 },\n    { color: 'dark', fontSize: 2.8, x: 0.75, y: 90.75 },\n    { color: 'dark', fontSize: 2.8, x: 10, y: 99 },\n    { color: 'light', fontSize: 2.8, x: 22.5, y: 99 },\n    { color: 'dark', fontSize: 2.8, x: 35, y: 99 },\n    { color: 'light', fontSize: 2.8, x: 47.5, y: 99 },\n    { color: 'dark', fontSize: 2.8, x: 60, y: 99 },\n    { color: 'light', fontSize: 2.8, x: 72.5, y: 99 },\n    { color: 'dark', fontSize: 2.8, x: 85, y: 99 },\n    { color: 'light', fontSize: 2.8, x: 97.5, y: 99 },\n  ];\n}\n","import type { Board } from 'chessboard/model/board/types';\nimport type { Coordinate } from 'chessboard/renderers/default/coordinates/get-text-nodes/types';\nimport { getTextChar } from 'chessboard/renderers/default/coordinates/get-text-nodes/get-text-char';\nimport { getCoordinates } from 'chessboard/renderers/default/coordinates/get-text-nodes/get-coordinates';\n\n/**\n * Get the SVG HTML.\n */\nexport function getTextNodes(position: Board.CoordinatesPositions, flipped: boolean) {\n  const text = getTextChar(flipped);\n  const coordinates = getCoordinates(position);\n\n  return (coordinates as Coordinate[])\n    .map((coordinate, ndx) => ({\n      ...coordinate,\n      text: text[ndx],\n    }))\n    .map(\n      (coord) =>\n        `<text \n          x=\"${coord.x}\" \n          y=\"${coord.y}\" \n          ${coord.fontSize ? `font-size=\"${coord.fontSize}\"` : ''} \n          class=\"coordinate-${coord.color}\">${coord.text}</text>`,\n    )\n    .join('');\n}\n","import 'chessboard/renderers/default/coordinates/style.scss';\nimport type { BoardDOM } from 'chessboard/renderers/default/board/types';\nimport { BoardPlaceholders } from 'chessboard/renderers/default/board/types';\nimport { Board } from 'chessboard/model/board/types';\nimport { setTestData, TestElements, TestKeys } from 'src/utils/set-test-data';\nimport { getTextNodes } from 'chessboard/renderers/default/coordinates/get-text-nodes';\nimport type { ThemeAssets } from 'chessboard/config/theme-assets';\n\n/**\n * Create coordinates.\n */\nexport function createCoordinatesMethods({\n  board,\n  options,\n}: {\n  board: BoardDOM;\n  options: Board.Options;\n}) {\n  return {\n    setCoordinates,\n  };\n\n  /**\n   * Add coordinates.\n   */\n  function addCoordinates(type: Board.CoordinatesPositions, boardIsFlipped: boolean) {\n    const svg = createCoordinates(type, boardIsFlipped, options);\n\n    board.addToDom({ el: svg, type: BoardPlaceholders.Coordinates });\n  }\n\n  /**\n   * Add coordinates to the DOM.\n   */\n  function setCoordinates({\n    flipped,\n    position,\n  }: {\n    flipped: boolean;\n    position: Board.CoordinatesPositions;\n  }): void {\n    removeCoordinates();\n\n    if (position === Board.CoordinatesPositions.Off) {\n      return;\n    }\n\n    addCoordinates(position, flipped);\n  }\n\n  /**\n   * Remove coordinates from the DOM.\n   */\n  function removeCoordinates(): void {\n    const coordinatesEl = board.el.querySelector('.coordinates');\n\n    if (!coordinatesEl) {\n      return;\n    }\n\n    (<HTMLElement>coordinatesEl.parentNode).removeChild(coordinatesEl);\n  }\n}\n\n/**\n * Creates the SVG element for the coordinates.\n */\nexport function createCoordinates(\n  type: Board.CoordinatesPositions,\n  boardIsFlipped: boolean,\n  options: Board.Options<ThemeAssets.Assets>,\n  style?: string,\n): SVGSVGElement {\n  const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  svg.setAttribute('viewBox', '0 0 100 100');\n  svg.classList.add('coordinates');\n\n  if (type === Board.CoordinatesPositions.Outside) {\n    svg.classList.add('outside');\n  }\n\n  if (options.test) {\n    setTestData(svg, {\n      [TestKeys.Element]: TestElements.Coordinates,\n      [TestKeys.Flipped]: boardIsFlipped.toString(),\n      [TestKeys.Position]: type,\n    });\n  }\n\n  svg.innerHTML = '';\n\n  if (style) {\n    svg.innerHTML += style;\n  }\n\n  svg.innerHTML += getTextNodes(type, boardIsFlipped);\n  return svg;\n}\n","import 'chessboard/renderers/default/fade-setup/style.scss';\nimport type { Board } from 'chessboard/model/board/types';\nimport type { Core } from 'chessboard/core/config/types';\nimport type { BoardDOM } from 'chessboard/renderers/default/board/types';\nimport { BoardPlaceholders } from 'chessboard/renderers/default/board/types';\nimport { setTestData, TestKeys, TestElements } from 'src/utils/set-test-data';\n\n/**\n * Create coordinates.\n */\nexport function createFadeSetupMethods({ board }: { board: BoardDOM }) {\n  let fadeInOverlay: HTMLElement | undefined;\n\n  return {\n    fadeSetup,\n  };\n\n  /**\n   * Adds in the overlay div\n   */\n  function createFadeInOverlay(options: Board.Options) {\n    fadeInOverlay = document.createElement('div');\n\n    fadeInOverlay.classList.add('fade-in-overlay');\n\n    board.addToDom({ el: fadeInOverlay, type: BoardPlaceholders.FadeSetup });\n\n    fadeInOverlay.addEventListener('animationend', removeAnimation);\n\n    if (options.test) {\n      setTestData(fadeInOverlay, {\n        [TestKeys.Element]: TestElements.FadeInOverlay,\n      });\n    }\n  }\n\n  /**\n   * Removes a preexisting animation\n   */\n  function removeAnimation() {\n    if (fadeInOverlay) {\n      fadeInOverlay.style.animationDuration = '';\n      fadeInOverlay.classList.remove('animate');\n    }\n  }\n\n  /**\n   * Removes the overlay div\n   */\n  function removeFadeInOverlay() {\n    if (fadeInOverlay) {\n      fadeInOverlay.remove();\n    }\n\n    // remove memory reference and thereby remove animationend listener\n    fadeInOverlay = undefined;\n  }\n\n  /**\n   * Add fadeSetup.\n   */\n  function fadeSetup({ options }: Core.Context) {\n    // Exit early if the fade setup is 0\n    if (options.fadeSetup === 0) {\n      // if a preexisting fadeCover element exists and the API is falling back\n      // to 0, we need to remove the DOM element\n      if (fadeInOverlay) {\n        removeFadeInOverlay();\n      }\n\n      return;\n    }\n\n    if (!fadeInOverlay) {\n      createFadeInOverlay(options);\n    }\n\n    // from now on fadeInOverlay is defined but typescript doesn't know\n    if (fadeInOverlay) {\n      fadeInOverlay.style.animationDuration = `${options.fadeSetup / 1000}s`;\n      fadeInOverlay.classList.add('animate');\n    }\n  }\n}\n","/**\n * Remove class names of an element that start with a given string.\n */\nexport function removeClassNamesStartingWith(className: string, str: string) {\n  return className\n    .split(' ')\n    .filter((name) => !name.startsWith(str))\n    .join(' ')\n    .trim();\n}\n","import { removeClassNamesStartingWith } from 'utils/dom/remove-class-names-starting-with';\nimport type { Board } from 'chessboard/model/board/types';\nimport { getFileRankFromSan } from 'chessboard/model/board/get-file-rank-from-san';\n\n/**\n * Sets an element's transform coordinates to align with a given square.\n */\nexport function setPositionBySquare({\n  square,\n  el,\n}: {\n  square: Board.SanSquare;\n  el: HTMLElement;\n}): void {\n  const fileRank = getFileRankFromSan(square);\n\n  if (!fileRank) {\n    return;\n  }\n\n  el.className = removeClassNamesStartingWith(el.className, 'square-');\n\n  el.classList.add(`square-${fileRank.file}${fileRank.rank}`);\n\n  el.style.transform = '';\n}\n","import type { Board } from 'chessboard/model/board/types';\nimport type { BoardDOM } from 'chessboard/renderers/default/board/types';\nimport { BoardPlaceholders } from 'chessboard/renderers/default/board/types';\nimport { setPositionBySquare } from 'chessboard/model/board/set-position-by-square';\nimport { setTestData, TestKeys, TestElements } from 'src/utils/set-test-data';\n\n/**\n * Handlers related to the hover square.\n */\nexport function createHoverSquareMethods({\n  board,\n  options,\n}: {\n  board: BoardDOM;\n  options: Board.Options;\n}) {\n  const hoverSquareEl: HTMLElement = createHoverSquareEl();\n  let hoveredSquare: Board.SanSquare | undefined;\n\n  return {\n    hideHoverSquare,\n    showHoverSquare,\n  };\n\n  /**\n   * Show the hover square.\n   */\n  function showHoverSquare(square: Board.SanSquare) {\n    if (hoveredSquare === square) {\n      return;\n    }\n\n    hoverSquareEl.style.visibility = '';\n\n    if (options.test) {\n      setTestData(hoverSquareEl, {\n        [TestKeys.Element]: TestElements.HoverSquare,\n      });\n    }\n\n    setPositionBySquare({ el: hoverSquareEl, square });\n    hoveredSquare = square;\n  }\n\n  /**\n   * Hide the hover square.\n   */\n  function hideHoverSquare() {\n    if (hoverSquareEl) {\n      hoverSquareEl.style.visibility = 'hidden';\n      hoveredSquare = undefined;\n    }\n  }\n\n  /**\n   * Create the hover square element\n   */\n  function createHoverSquareEl() {\n    const el = document.createElement('div');\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n\n    svg.setAttribute('viewBox', '0 0 100 100');\n    svg.innerHTML =\n      '<rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" stroke=\"rgba(255, 255, 255, 0.65)\" stroke-width=\"10\" fill=\"none\"/>';\n\n    el.append(svg);\n\n    el.classList.add('hover-square');\n    el.style.visibility = 'hidden';\n\n    board.addToDom({ el, type: BoardPlaceholders.HoverSquare });\n\n    if (options.test) {\n      setTestData(el, {\n        [TestKeys.Element]: TestElements.HoverSquare,\n      });\n    }\n\n    return el;\n  }\n}\n","import type { Board } from 'chessboard/model/board/types';\nimport type { BoardDOM } from 'chessboard/renderers/default/board/types';\nimport { BoardPlaceholders } from 'chessboard/renderers/default/board/types';\nimport { setTestData, TestElements, TestKeys } from 'src/utils/set-test-data';\nimport { setPositionBySquare } from 'chessboard/model/board/set-position-by-square';\n\n/**\n * Handlers related to move hints.\n */\nexport function createMoveHintsMethods({ board }: { board: BoardDOM }) {\n  const hints: { [key: string]: HTMLElement } = {};\n\n  return {\n    addCaptureHints,\n    addMoveHints,\n    removeHints,\n  };\n\n  /**\n   * Creates move hints and adds them to the DOM.\n   */\n  function addMoveHints(squares: Board.SanSquare[]): void {\n    squares.forEach((square) => {\n      if (hints[square]) {\n        return;\n      }\n\n      hints[square] = createHintFromSquare(square);\n\n      board.addToDom({ el: hints[square], type: BoardPlaceholders.MoveHints });\n    });\n  }\n\n  /**\n   * Creates hints for potential captures and adds them to the DOM.\n   */\n  function addCaptureHints(squares: Board.SanSquare[]): void {\n    squares.forEach((square) => {\n      if (hints[square]) {\n        removeHint(square);\n      }\n\n      hints[square] = createHintFromSquare(square, { isPotentialCapture: true });\n\n      board.addToDom({ el: hints[square], type: BoardPlaceholders.CaptureHints });\n\n      hints[square].style.borderWidth = `${hints[square].clientWidth * 0.1}px`;\n    });\n  }\n\n  /**\n   * Removes all move hints on the given squares.\n   */\n  function removeHints(squares: Board.SanSquare[]): void {\n    squares.forEach(removeHint);\n  }\n\n  /**\n   * Creates a move hint element and sets the position.\n   */\n  function createHintFromSquare(\n    square: Board.SanSquare,\n    options: { isPotentialCapture?: boolean } = {},\n  ): HTMLElement {\n    const el = document.createElement('div');\n\n    setTestData(el, {\n      [TestKeys.Element]: options.isPotentialCapture\n        ? TestElements.PotentialCapture\n        : TestElements.Hint,\n    });\n\n    el.classList.add(options.isPotentialCapture ? 'capture-hint' : 'hint');\n\n    setPositionBySquare({ el, square });\n\n    return el;\n  }\n\n  /**\n   * Removes a single move hint from the cache and the DOM.\n   */\n  function removeHint(square: Board.SanSquare): void {\n    if (!hints[square]) {\n      return;\n    }\n\n    const parent = hints[square].parentNode;\n\n    (<HTMLElement>parent).removeChild(hints[square]);\n\n    delete hints[square];\n  }\n}\n","import type { Board } from 'chessboard/model/board/types';\nimport type { KeyedBlinkingHighlight } from 'chessboard/plugins/highlights/config/types';\nimport { HighlightType } from 'chessboard/plugins/highlights/config/types';\n\n/**\n * Create a blinking square for when the king is in check.\n */\nexport function createCheckBlinkingHighlight(\n  square: Board.SanSquare,\n  color: string,\n): KeyedBlinkingHighlight {\n  return {\n    data: { color, interval: 500, opacity: 0.5, square, times: 3 },\n    key: square,\n    type: HighlightType,\n  };\n}\n","import type { Board } from 'chessboard/model/board/types';\n\nexport interface Animations {\n  add: (animations: PieceAnimation[], options: Board.Options) => void;\n  flush: () => void;\n  run: () => void;\n}\n\nexport enum AnimationTypes {\n  Slide,\n  FadeOut,\n}\n\nexport type Callback = (() => void) | undefined;\n\nexport interface PieceAnimation {\n  callback?: Callback;\n  el: HTMLElement;\n  from?: Board.SanSquare;\n  to?: Board.SanSquare;\n  type: AnimationTypes;\n}\n\nexport interface AnimationStep {\n  callback?: Callback;\n  el: HTMLElement;\n  style: Record<string, string>;\n}\n\nexport type AnimationStepsGenerators = {\n  [key in AnimationTypes]: ({\n    animation,\n    isFlipped,\n    numSteps,\n  }: {\n    animation: PieceAnimation;\n    isFlipped: boolean;\n    numSteps: number;\n  }) => AnimationStep[];\n};\n","import type {\n  AnimationStep,\n  Callback,\n  PieceAnimation,\n} from 'chessboard/renderers/default/piece-movement/animations/types';\n\n/**\n * Fades out from 1 to 0 linearly, but only after 75% of the duration\n * i.e. the fade out is delayed.\n */\nexport function generateFadeOutSteps({\n  animation,\n  numSteps,\n}: {\n  animation: PieceAnimation;\n  numSteps: number;\n}): AnimationStep[] {\n  return (\n    Array(numSteps)\n      .fill(undefined)\n      // eslint-disable-next-line\n      .map((_, ndx, arr) => {\n        let callback: Callback;\n\n        const stepPercentage = (ndx + 1) / numSteps;\n        let opacity = 2.86 - 2.86 * stepPercentage;\n\n        opacity = opacity > 1 ? 1 : opacity;\n\n        if (ndx === arr.length - 1 && animation.callback) {\n          callback = animation.callback;\n        }\n\n        return {\n          callback,\n          el: animation.el,\n          style: {\n            opacity: opacity.toString(),\n          },\n        };\n      })\n  );\n}\n","import { getFileRankFromSan } from 'chessboard/model/board/get-file-rank-from-san';\nimport type JCE from '@chesscom/js-chess-engine';\nimport type { Board } from './types';\n\n/**\n * Get the file rank taking into account a flipped board. So if the square is a1, then\n * when it's flipped, the file/rank will be 8/8.\n */\nexport function getAbsoluteFileRankFromSan(\n  square: JCE.SanSquare,\n  flipped: boolean,\n): Board.FileRank {\n  const fileRank = getFileRankFromSan(square);\n\n  return flipped ? { file: 9 - fileRank.file, rank: 9 - fileRank.rank } : fileRank;\n}\n","import type { Board } from 'chessboard/model/board/types';\nimport { getAbsoluteFileRankFromSan } from 'chessboard/model/board/get-absolute-file-rank-from-san';\n\n/**\n * Get xy coordinates of the top-left of a square, as a percentage of the square size,\n * and from the top-left of the board.\n */\nexport function getCoordsFromSquare(square: Board.SanSquare, flipped: boolean): Board.Coords {\n  const absoluteFileRank = getAbsoluteFileRankFromSan(square, flipped);\n\n  return {\n    x: absoluteFileRank.file * 100 - 100,\n    y: (8 - absoluteFileRank.rank) * 100,\n  };\n}\n","import { getCoordsFromSquare } from 'chessboard/renderers/default/get-coords-from-square';\nimport type {\n  AnimationStep,\n  PieceAnimation,\n} from 'chessboard/renderers/default/piece-movement/animations/types';\n\n/**\n * Generate steps for a sliding animation.\n */\nexport function generateSlideSteps({\n  animation,\n  isFlipped = false,\n  numSteps,\n}: {\n  animation: PieceAnimation;\n  isFlipped: boolean;\n  numSteps: number;\n}): AnimationStep[] {\n  const { el, from, to } = animation;\n\n  if (!from || !to) {\n    return [];\n  }\n\n  const fromCoords = getCoordsFromSquare(from, isFlipped);\n  const toCoords = getCoordsFromSquare(to, isFlipped);\n\n  if (!fromCoords || !toCoords) {\n    return [];\n  }\n\n  const xStep = (toCoords.x - fromCoords.x) / numSteps;\n  const yStep = (toCoords.y - fromCoords.y) / numSteps;\n\n  return Array(numSteps)\n    .fill(undefined)\n    .map((_, ndx) => {\n      const isLastStep = ndx === numSteps - 1;\n\n      // If we're at not at the last step\n      const coords = !isLastStep\n        ? {\n            // Coords are the fromCoords + the diff\n            x: fromCoords.x + xStep * (ndx + 1),\n            y: fromCoords.y + yStep * (ndx + 1),\n          }\n        : toCoords; // Otherwise it's just to toCoords\n\n      return {\n        el,\n        style: {\n          transform: isLastStep ? '' : `translate(${coords.x}%, ${coords.y}%)`,\n          zIndex: isLastStep ? '' : '10',\n        },\n      };\n    });\n}\n","import { Board } from 'chessboard/model/board/types';\nimport type { BoardDOM } from 'chessboard/renderers/default/board/types';\nimport type {\n  AnimationStep,\n  AnimationStepsGenerators,\n  PieceAnimation,\n} from 'chessboard/renderers/default/piece-movement/animations/types';\nimport { AnimationTypes } from 'chessboard/renderers/default/piece-movement/animations/types';\nimport { generateFadeOutSteps } from 'chessboard/renderers/default/piece-movement/animations/generate-fade-out-steps';\nimport { generateSlideSteps } from 'chessboard/renderers/default/piece-movement/animations/generate-slide-steps';\n\nconst FRAME_LENGTH_MS = 16;\n\n/**\n * Create an interface to add and flush animations.\n * Animations are always flushed before adding new ones.\n */\nexport function createAnimations(board: BoardDOM) {\n  let isLastStep: boolean;\n  const steps: any[] = [];\n\n  const generateSteps: AnimationStepsGenerators = {\n    [AnimationTypes.FadeOut]: generateFadeOutSteps,\n    [AnimationTypes.Slide]: generateSlideSteps,\n  };\n\n  return {\n    add,\n    flush,\n    run,\n  };\n\n  /**\n   * Add an array of animations and start them.\n   */\n  function add(animations: PieceAnimation[], opts: Board.Options) {\n    const { animationType, flipped } = opts;\n\n    const numSteps = Math.max(Math.floor(getDuration(animationType) / FRAME_LENGTH_MS), 1);\n\n    // This produces the following structure:\n    // [[firstAnimStep#1, firstAnimStep#2, firstAnimStep#3], [secondAnimStep#1, secondAnimStep#2, secondAnimStep#3]]\n    const animationsSteps = animations.map((animation) =>\n      generateSteps[animation.type]({\n        animation,\n        isFlipped: flipped || false,\n        numSteps,\n      }),\n    );\n\n    animationsSteps.forEach((animation) => {\n      if (animation.length > steps.length) {\n        const fillerArray = Array(animation.length - steps.length).fill([]);\n        steps.unshift(...fillerArray);\n      }\n\n      // eslint-disable-next-line max-params\n      animation.forEach((step, ndx, arr) => {\n        const ndxFromEnd = arr.length - ndx;\n\n        steps[steps.length - ndxFromEnd] = [...steps[steps.length - ndxFromEnd], step];\n      });\n    });\n  }\n\n  /**\n   * Flush all animations synchronously.\n   */\n  function flush() {\n    if (steps.length === 0) {\n      isLastStep = true;\n      return;\n    }\n\n    // Remove all but the last step\n    steps.splice(0, steps.length - 1);\n\n    run();\n  }\n\n  /**\n   * Run through the steps and apply CSS properties to elements.\n   */\n  function run() {\n    isLastStep = steps.length < 2;\n\n    const nextStep = steps.shift();\n\n    if (!nextStep) {\n      return;\n    }\n\n    if (!board.isAnimating()) {\n      board.setAnimatingStatus(true);\n    }\n\n    nextStep.forEach((step: AnimationStep) => {\n      Object.entries(step.style).forEach(([prop, value]) => {\n        (<any>step.el.style)[prop] = value;\n      });\n\n      // Some steps may have callbacks. For instance if we're trying to fade-out\n      // a piece, then we will need to remove it after the last step, so the\n      // fadeOut animation adds a callback to remove the element.\n      if (step.callback) {\n        step.callback();\n      }\n    });\n\n    if (steps.length === 0) {\n      board.setAnimatingStatus(false);\n    }\n\n    if (!isLastStep) {\n      requestAnimationFrame(() => {\n        run();\n      });\n    }\n  }\n}\n\n/**\n * Get the animation duration according to the animation type.\n */\nfunction getDuration(type: Board.Animation.Types) {\n  switch (type) {\n    case Board.Animation.Types.Slow:\n      return Board.Animation.Speeds.Slow;\n    case Board.Animation.Types.Fast:\n      return Board.Animation.Speeds.Fast;\n    case Board.Animation.Types.None:\n      return 0;\n    default:\n      return Board.Animation.Speeds.Default;\n  }\n}\n","export const className = 'element-pool';\n","import { ChessError } from 'chessboard/model/error';\nimport { ErrorCodes } from 'chessboard/model/error/types';\nimport type { ElementPool } from './config/types';\nimport { className } from './config/constants';\nimport './styles.scss';\n\n/**\n * Create a pool of DOM elements.\n */\nexport function createElementPool({\n  appendTo,\n  elementType = 'div',\n  insertBefore,\n  startingCount = 0,\n}: {\n  appendTo?: Node;\n  elementType?: string;\n  insertBefore?: Node;\n  startingCount?: number;\n}): ElementPool {\n  if (!appendTo && !insertBefore) {\n    throw new ChessError({\n      code: ErrorCodes.BadData,\n      message:\n        'When creating an element pool, you must provide an element to \"appendTo\" or \"insertBefore\".',\n    });\n  }\n\n  const pool: HTMLElement[] = Array(startingCount)\n    .fill(undefined)\n    .map(createElement)\n    .map(hideElement);\n\n  return {\n    destroy,\n    get,\n    put,\n  };\n\n  /**\n   * Create a new element and attach it to the DOM.\n   */\n  function createElement(): HTMLElement {\n    const el = document.createElement(elementType);\n\n    el.className = className;\n\n    if (appendTo) {\n      appendTo.appendChild(el);\n    } else {\n      insertBefore?.parentNode?.insertBefore(el, insertBefore);\n    }\n\n    return el;\n  }\n\n  /**\n   * Destroy the elements in the element pool.\n   */\n  function destroy() {\n    pool.forEach((element) => element.parentNode?.removeChild(element));\n    pool.length = 0;\n  }\n\n  /**\n   * Get an element from the pool, or create a new one if necessary.\n   */\n  function get(): HTMLElement {\n    const el = pool.pop() || createElement();\n\n    return showElement(el);\n  }\n\n  /**\n   * Hide an element.\n   */\n  function hideElement(el: HTMLElement): HTMLElement {\n    for (const key in el.dataset) {\n      if (el.dataset[key]) {\n        el.dataset[key] = '';\n      }\n    }\n\n    el.className = className;\n    el.style.cssText = '';\n\n    return el;\n  }\n\n  /**\n   * Put an element back into the pool.\n   */\n  function put(el: HTMLElement): HTMLElement {\n    hideElement(el);\n\n    pool.push(el);\n\n    return el;\n  }\n\n  /**\n   * Show an element.\n   */\n  function showElement(el: HTMLElement): HTMLElement {\n    el.className = '';\n\n    return el;\n  }\n}\n","import type { Animations } from 'chessboard/renderers/default/piece-movement/animations/types';\nimport type { Board } from 'chessboard/model/board/types';\nimport type { Game } from 'chessboard/model/game/types';\nimport type { Collection } from 'utils/create-collection/types';\nimport type JCE from '@chesscom/js-chess-engine';\n\nexport interface PieceDetails {\n  color: Game.ColorsAsNumbers;\n  type: Game.Piece.ShortStrings.Black;\n}\n\nexport interface Piece {\n  el: HTMLElement;\n  getDetails: () => PieceDetails;\n  setDetails: (color: Game.ColorsAsNumbers, type: Game.Piece.ShortStrings.Black) => void;\n  setDraggingState: (drag?: boolean) => void;\n  setPositionByCoords: (coords: Board.Coords) => void;\n  setPositionBySquare: (to: Board.SanSquare, suspend?: boolean) => void;\n}\n\nexport type PieceCollection = Collection<Piece, Board.SanSquare>;\n\nexport const enum PieceEvents {\n  Created = 'Created',\n  DetailsSet = 'DetailsSet',\n  DragEnded = 'DragEnd',\n  DragStarted = 'DragStart',\n  PieceShown = 'PieceShown',\n  PieceHidden = 'PieceHidden',\n  PositionSetBySquare = 'PositionSetBySquare',\n}\n\nexport interface PieceMove {\n  animate?: boolean;\n  captured?: number | JCE.CasedPieceSignature;\n  color?: Game.ColorsAsNumbers;\n  from?: Board.SanSquare;\n  kingTo?: Board.SanSquare;\n  promotion?: Game.Piece.ShortStrings.Black;\n  to: Board.SanSquare;\n}\n\nexport interface Pieces {\n  animations: Animations;\n  create: (piece: Game.Piece.Model) => Piece;\n  destroy: () => void;\n  get: (square?: Board.SanSquare, shouldThrow?: boolean) => Piece | PieceCollection | undefined;\n  getDraggingSquare: () => Board.SanSquare | undefined;\n  move: (moves: PieceMove | (PieceMove | undefined)[], options: Board.Options) => void;\n  remove: ({\n    animate,\n    options,\n    squares,\n  }: {\n    squares: Board.SanSquare[];\n    options: Board.Options;\n    animate?: boolean;\n  }) => void;\n  setDraggingState: (square: Board.SanSquare, drag?: boolean) => void;\n  setPositionByCoords: (square: Board.SanSquare, coords: Board.Coords) => void;\n  setPositionBySquare: (square: Board.SanSquare, to: Board.SanSquare) => void;\n  suspendOverSquare: (square: Board.SanSquare, to: Board.SanSquare) => void;\n}\n","import type { Board } from 'chessboard/model/board/types';\nimport { Game } from 'chessboard/model/game/types';\nimport { setTestData, TestElements, TestKeys } from 'src/utils/set-test-data';\nimport { getColorAsLetter } from 'chessboard/model/game/get-color-as-letter';\nimport { getFileRankFromSan } from 'chessboard/model/board/get-file-rank-from-san';\nimport { setPositionBySquare as setElPositionBySquare } from 'chessboard/model/board/set-position-by-square';\nimport type { Piece, PieceDetails } from 'chessboard/renderers/default/piece-movement/types';\nimport { PieceEvents } from 'chessboard/renderers/default/piece-movement/types';\nimport type { EventEmitterUtil } from '@chesscom/web-ui';\n\n/**\n * Create a piece and add it to the DOM.\n */\nexport function createPiece({\n  details,\n  el,\n  emitter,\n  test,\n}: {\n  details: Game.Piece.Model;\n  el: HTMLElement;\n  emitter: EventEmitterUtil.EventEmitter;\n  test?: boolean;\n}): Piece {\n  let shortString: string;\n  const piece = { ...details };\n\n  el.classList.add('piece');\n\n  emitter.emit(PieceEvents.Created, { ...piece });\n\n  setDetails(piece.color, piece.type);\n  setPositionBySquare(<Board.SanSquare>piece.square);\n\n  if (test) {\n    setTestData(el, {\n      [TestKeys.Element]: TestElements.Piece,\n    });\n  }\n\n  return {\n    el,\n    getDetails,\n    setDetails,\n    setDraggingState,\n    setPositionByCoords,\n    setPositionBySquare,\n  };\n\n  /**\n   * Generate the short string, e.g. 'wp', 'bk', etc.\n   */\n  function generateShortString(\n    color: Game.ColorsAsNumbers,\n    type: Game.Piece.ShortStrings.Black,\n  ): string {\n    return `${getColorAsLetter(color)}${type}`;\n  }\n\n  /**\n   * Returns the details object.\n   */\n  function getDetails(): PieceDetails {\n    return details;\n  }\n\n  /**\n   * Sets new type and color for the piece. This adds the relevant class to the element\n   * and saves the details.\n   */\n  function setDetails(color: Game.ColorsAsNumbers, type: Game.Piece.ShortStrings.Black): void {\n    el.classList.remove(shortString);\n    shortString = generateShortString(color, type);\n    el.classList.add(shortString);\n    details.type = type;\n    details.color = color;\n\n    emitter.emit(PieceEvents.DetailsSet, { ...details, shortString });\n\n    if (test) {\n      setTestData(el, {\n        [TestKeys.Type]: type,\n        [TestKeys.Color]: getColorAsLetter(color),\n        [TestKeys.ShortString]: color === Game.ColorsAsNumbers.Black ? type : type.toUpperCase(),\n      });\n    }\n  }\n\n  /**\n   * Raises a piece up above the rest with z-index.\n   */\n  function setDraggingState(drag?: boolean): void {\n    if (drag) {\n      el.classList.add('dragging');\n\n      emitter.emit(PieceEvents.DragStarted, { ...details });\n\n      if (test) {\n        setTestData(el, {\n          [TestKeys.Dragging]: 'true',\n        });\n      }\n\n      return;\n    }\n\n    if (test) {\n      setTestData(el, {\n        [TestKeys.Dragging]: undefined,\n      });\n    }\n\n    el.classList.remove('dragging');\n\n    emitter.emit(PieceEvents.DragEnded, { ...details });\n  }\n\n  /**\n   * Set the position of the piece by square.\n   */\n  function setPositionBySquare(square: Board.SanSquare, suspend?: boolean): void {\n    if (test) {\n      const fileRank = getFileRankFromSan(square);\n\n      if (!fileRank) {\n        return;\n      }\n\n      if (fileRank && !suspend) {\n        setTestData(el, {\n          [TestKeys.File]: fileRank.file.toString(),\n          [TestKeys.Rank]: fileRank.rank.toString(),\n          [TestKeys.Square]: square,\n        });\n      }\n    }\n\n    setElPositionBySquare({ el, square });\n\n    emitter.emit(PieceEvents.PositionSetBySquare, { ...details });\n  }\n\n  /**\n   * Set the position of the the piece by coords.\n   */\n  function setPositionByCoords(coords: Board.Coords): void {\n    if (!coords) {\n      return;\n    }\n\n    el.style.transform = `translate(${coords.x}%, ${coords.y}%)`;\n  }\n}\n","import type {\n  Animations,\n  PieceAnimation,\n} from 'chessboard/renderers/default/piece-movement/animations/types';\nimport { AnimationTypes } from 'chessboard/renderers/default/piece-movement/animations/types';\nimport type { Board } from 'chessboard/model/board/types';\nimport type { BoardDOM } from 'chessboard/renderers/default/board/types';\nimport { ChessError } from 'chessboard/model/error';\nimport { createAnimations } from 'chessboard/renderers/default/piece-movement/animations';\nimport { createElementPool } from 'src/utils/dom/element-pool/element-pool';\nimport { createPiece } from 'chessboard/renderers/default/piece-movement/create-piece';\nimport { createCollection } from 'utils/create-collection/create-collection';\nimport { ErrorCodes } from 'chessboard/model/error/types';\nimport type { EventEmitterUtil } from '@chesscom/web-ui';\nimport type { Game } from 'chessboard/model/game/types';\nimport type {\n  Piece,\n  PieceMove,\n  Pieces,\n  PieceCollection,\n} from 'chessboard/renderers/default/piece-movement/types';\nimport { PieceEvents } from 'chessboard/renderers/default/piece-movement/types';\nimport { nodeTargetSquare } from 'api/move/model/node-target-square';\n\n/**\n * Create an object that holds the pieces.\n */\nexport function createPieces({\n  board,\n  emitter,\n  options,\n}: {\n  board: BoardDOM;\n  emitter: EventEmitterUtil.EventEmitter;\n  options: Board.Options;\n}): Pieces {\n  const elementPool = createElementPool({\n    insertBefore: board.placeholders.pieces,\n    startingCount: 32,\n  });\n  const animations: Animations = createAnimations(board);\n  let draggingSquare: Board.SanSquare | undefined;\n  const pieces: PieceCollection = createCollection<Piece, Board.SanSquare>();\n\n  return {\n    animations,\n    create,\n    destroy,\n    get,\n    getDraggingSquare,\n    move,\n    remove,\n    setDraggingState,\n    setPositionByCoords,\n    setPositionBySquare,\n    suspendOverSquare,\n  };\n\n  /**\n   * Create a piece, and add it to the DOM.\n   */\n  function create(pieceToCreate: Game.Piece.Model): Piece {\n    const piece: Piece = createPiece({\n      details: pieceToCreate,\n      el: elementPool.get(),\n      emitter,\n      test: options.test,\n    });\n\n    pieces.set(<Board.SanSquare>pieceToCreate.square, piece);\n\n    emitter.emit(PieceEvents.PieceShown, { ...pieces.get(<Board.SanSquare>pieceToCreate.square) });\n\n    return piece;\n  }\n\n  /**\n   * Destroy the pieces.\n   */\n  function destroy() {\n    elementPool.destroy();\n  }\n\n  /**\n   * Get the piece on a square.\n   */\n  function get(square?: Board.SanSquare, shouldThrow: boolean = true) {\n    if (!square) {\n      return pieces;\n    }\n\n    if (!pieces.isDefined(square) && shouldThrow) {\n      throw new ChessError({\n        code: ErrorCodes.ElementNotFound,\n        data: { square },\n        message: 'Piece does not exist.',\n      });\n    }\n\n    return pieces.isDefined(square) ? pieces.get(square) : undefined;\n  }\n\n  /**\n   * Returns the dragging square.\n   */\n  function getDraggingSquare(): Board.SanSquare | undefined {\n    return draggingSquare;\n  }\n\n  /**\n   * Move a piece or pieces.\n   */\n  function move(moves: PieceMove | (PieceMove | undefined)[], opts: Board.Options): void {\n    const gameMoves: (PieceMove | undefined)[] = Array.isArray(moves) ? moves : [moves];\n\n    const gameToMoves = gameMoves\n      .filter(Boolean)\n      .map((gameMove) => nodeTargetSquare(<PieceMove>gameMove));\n\n    // Cache the piece objects before we start moving them around.\n    const moveFromPieces: Piece[] = gameMoves\n      .filter(Boolean)\n      .map((gameMove) => <Piece>get((<PieceMove>gameMove).from));\n\n    const anims: PieceAnimation[] = [];\n\n    gameMoves.forEach((gameMove, ndx) => {\n      if (!gameMove) {\n        throw new ChessError({\n          code: ErrorCodes.ElementNotFound,\n          message: 'Move object does not exist.',\n        });\n      }\n\n      const squareTo = nodeTargetSquare(gameMove);\n\n      if (!squareTo) {\n        return;\n      }\n\n      // Set the position first. This ensures that when the animations are flushed,\n      // the piece will have the correct position. As the next animation code is\n      // synchronous, the actual transform position set here is overwritten in the\n      // same execution cycle.\n      (<Piece>moveFromPieces[ndx]).setPositionBySquare(squareTo);\n\n      if (gameMove.animate) {\n        anims.push({\n          el: (<Piece>moveFromPieces[ndx]).el,\n          from: gameMove.from,\n          to: squareTo,\n          type: AnimationTypes.Slide,\n        });\n      }\n\n      // Update pieces cache\n      pieces.set(squareTo, moveFromPieces[ndx]);\n\n      if (!gameToMoves.includes(<Board.SanSquare>gameMove.from)) {\n        pieces.deleteItem(<Board.SanSquare>gameMove.from);\n      }\n\n      if (gameMove.promotion) {\n        pieces.get(squareTo).setDetails(<Game.ColorsAsNumbers>gameMove.color, gameMove.promotion);\n      }\n    });\n\n    if (anims.length) {\n      animations.add(anims, opts);\n    }\n  }\n\n  /**\n   * Remove a piece from the DOM.\n   */\n  function remove({\n    animate,\n    options: opts,\n    squares,\n  }: {\n    squares: Board.SanSquare[];\n    options: Board.Options;\n    animate?: boolean;\n  }): void {\n    const anims: PieceAnimation[] = [];\n\n    squares.forEach((square) => {\n      if (!pieces.isDefined(square)) {\n        return;\n      }\n\n      const el = (<Piece>get(square)).el;\n\n      if (animate) {\n        anims.push({\n          callback: removeElement,\n          el: (<Piece>get(square)).el,\n          type: AnimationTypes.FadeOut,\n        });\n      } else {\n        removeElement();\n      }\n\n      pieces.deleteItem(square);\n\n      /**\n       * Remove an element\n       */\n      function removeElement(): void {\n        if (!el) {\n          throw new ChessError({\n            code: ErrorCodes.ElementNotFound,\n            data: { square },\n            message: 'Piece does not exist. Cannot remove.',\n          });\n        }\n\n        elementPool.put(el);\n        emitter.emit(PieceEvents.PieceHidden, square);\n      }\n    });\n\n    if (anims.length) {\n      animations.add(anims, opts);\n    }\n\n    // Ensure dragging state is unset if it was the dragging piece that was removed.\n    if (draggingSquare && !pieces.isDefined(draggingSquare)) {\n      draggingSquare = undefined;\n    }\n  }\n\n  /**\n   * Raises a piece up above the rest with z-index.\n   */\n  function setDraggingState(square: Board.SanSquare, drag?: boolean): void {\n    if (drag && square === draggingSquare) {\n      return;\n    }\n    const piece: Piece = <Piece>get(square);\n\n    piece.setDraggingState(drag);\n\n    draggingSquare = drag ? square : undefined;\n  }\n\n  /**\n   * Set the position of a piece by coordinates.\n   */\n  function setPositionByCoords(square: Board.SanSquare, coords: Board.Coords): void {\n    const piece: Piece = <Piece>get(square);\n\n    const currentDraggingSquare = getDraggingSquare();\n\n    if (currentDraggingSquare && currentDraggingSquare !== square) {\n      setDraggingState(currentDraggingSquare, false);\n    }\n\n    piece.setPositionByCoords(coords);\n  }\n\n  /**\n   * Set the position of a piece by square.\n   */\n  function setPositionBySquare(square: Board.SanSquare, to: Board.SanSquare): void {\n    const piece: Piece = <Piece>get(square);\n\n    if (to !== square) {\n      pieces.set(to, pieces.get(square));\n      pieces.deleteItem(square);\n    }\n\n    piece.setPositionBySquare(to);\n  }\n\n  /**\n   * Suspend a piece over a square.\n   */\n  function suspendOverSquare(square: Board.SanSquare, to: Board.SanSquare): void {\n    const piece: Piece = <Piece>get(square);\n\n    piece.setPositionBySquare(to, true);\n  }\n}\n","import type { Board } from 'chessboard/model/board/types';\nimport { Game } from 'chessboard/model/game/types';\nimport type { BoardDOM } from 'chessboard/renderers/default/board/types';\nimport type { Core } from 'chessboard/core/config/types';\nimport { createCheckBlinkingHighlight } from 'chessboard/renderers/default/highlights/create-check-blinking-highlight';\nimport { createPieces } from 'chessboard/renderers/default/piece-movement/create-pieces';\nimport type { DragPiece } from 'chessboard/renderers/config/types';\nimport type { EventEmitterUtil } from '@chesscom/web-ui';\nimport { isCastle } from 'chessboard/model/move/is-castle';\nimport { getUndoMoveDetails } from 'chessboard/renderers/model/get-undo-move-details';\nimport type {\n  Pieces,\n  Piece,\n  PieceMove,\n  PieceCollection,\n} from 'chessboard/renderers/default/piece-movement/types';\nimport { nodeTargetSquare } from 'api/move/model/node-target-square';\n\n/**\n * Handlers related to piece movement.\n */\nexport function createPieceMovementMethods({\n  board,\n  emitter,\n  options,\n}: {\n  board: BoardDOM;\n  emitter: EventEmitterUtil.EventEmitter;\n  options: Board.Options;\n}) {\n  const pieces: Pieces = createPieces({ board, emitter, options });\n\n  return {\n    destroy: pieces.destroy,\n    dragPiece,\n    dropPiece,\n    illegalMove,\n    loadPieces,\n    makeMove,\n    removePiece,\n    undoMove,\n  };\n\n  /**\n   * Drag a piece.\n   */\n  function dragPiece(p: DragPiece) {\n    if (!p) {\n      return;\n    }\n\n    if (p.toSquare) {\n      pieces.suspendOverSquare(p.square, p.toSquare);\n    } else if (p.coords) {\n      pieces.setPositionByCoords(p.square, p.coords);\n    }\n\n    pieces.setDraggingState(p.square, true);\n  }\n\n  /**\n   * Drop a piece.\n   */\n  function dropPiece() {\n    const currentDraggingSquare = pieces.getDraggingSquare();\n\n    if (!currentDraggingSquare) {\n      return;\n    }\n\n    pieces.setPositionBySquare(currentDraggingSquare, currentDraggingSquare);\n\n    pieces.setDraggingState(currentDraggingSquare, false);\n  }\n\n  /**\n   * Respond to an illegal move.\n   */\n  function illegalMove(kingInCheck: false | Board.SanSquare, context: Core.Context): void {\n    if (kingInCheck) {\n      const { renderer } = context;\n\n      renderer?.blinkHighlights(\n        [createCheckBlinkingHighlight(kingInCheck, options.checkBlinkingSquareColor)],\n        context,\n      );\n    }\n  }\n\n  /**\n   * Make a move.\n   */\n  function makeMove(move: Game.Move.Extended, context: Core.Context): void {\n    pieces.animations.flush();\n\n    if (move.drop) {\n      pieces.create(<Game.Piece.Model>{\n        color: move.color as Game.ColorsAsNumbers,\n        square: nodeTargetSquare(move),\n        type: move.piece as Game.Piece.ShortStrings.Black,\n      });\n\n      return;\n    }\n\n    if (move.EPCapturedSquare) {\n      pieces.remove({\n        animate: move.animate,\n        options: context.options,\n        squares: [move.EPCapturedSquare],\n      });\n    } else if (pieces.get(move.to, /* Don't throw if not found */ false) && !isCastle(move)) {\n      pieces.remove({ animate: move.animate, options: context.options, squares: [move.to] });\n    }\n\n    const moves: PieceMove[] = [move, <Game.Move.Extended>move.rookMove].filter(Boolean);\n\n    pieces.move(moves, context.options);\n\n    pieces.animations.run();\n  }\n\n  /**\n   * Load a new set of pieces onto the board, reusing the DOM where possible.\n   */\n  function loadPieces(params: { pieces: Game.Piece.Collection }, context: Core.Context): void {\n    const piecesToLoad = params.pieces;\n\n    pieces.animations.flush();\n\n    const squaresToLoad = piecesToLoad.keys();\n    const unneeded = (<PieceCollection>pieces.get())\n      .keys()\n      .filter((square) => !squaresToLoad.includes(square));\n\n    // Remove any that no longer exist\n    pieces.remove({\n      options: context.options,\n      squares: unneeded,\n    });\n\n    // Add or update any remaining pieces\n    piecesToLoad.keys().forEach((square) => {\n      const pieceToLoad: Game.Piece.Model = piecesToLoad.get(square);\n\n      // Don't throw error here.\n      const piece = pieces.get(square, false);\n\n      // Add it if it doesn't already exist\n      if (!piece) {\n        pieces.create(pieceToLoad);\n        return;\n      }\n\n      const { type, color } = (<Piece>piece).getDetails();\n\n      // Update it if it's changed\n      if (type !== pieceToLoad.type || color !== pieceToLoad.color) {\n        (<Piece>piece).setDetails(pieceToLoad.color, pieceToLoad.type);\n      }\n    });\n\n    pieces.animations.run();\n  }\n\n  /**\n   * Remove a piece.\n   */\n  function removePiece(square: Board.SanSquare, context: Core.Context) {\n    pieces.remove({ options: context.options, squares: [square] });\n  }\n\n  /**\n   * Undo the last move.\n   */\n  function undoMove(move: Game.Move.ExtendedNode, context: Core.Context): void {\n    pieces.animations.flush();\n\n    if (move.drop) {\n      removePiece(move.to, context);\n      return;\n    }\n\n    const { movedPieces, restoredPiece, promotedSquare } = getUndoMoveDetails(move);\n\n    pieces.move(movedPieces, context.options);\n\n    if (restoredPiece) {\n      pieces.create(restoredPiece);\n    }\n\n    if (promotedSquare) {\n      const promotedPiece: Piece = <Piece>pieces.get(promotedSquare);\n\n      const { color } = promotedPiece.getDetails();\n\n      promotedPiece.setDetails(color, Game.Piece.Types.Pawn);\n    }\n\n    pieces.animations.run();\n  }\n}\n","import type { Board } from 'chessboard/model/board/types';\nimport { Game } from 'chessboard/model/game/types';\nimport { Core } from 'chessboard/core/config/types';\nimport { setTestData, TestElements, TestKeys } from 'src/utils/set-test-data';\nimport type { BoardDOM } from 'chessboard/renderers/default/board/types';\nimport { BoardPlaceholders } from 'chessboard/renderers/default/board/types';\nimport { Pointerdown } from 'chessboard/model/dom/get-pointer-events';\nimport { createCoreEvent } from 'chessboard/core/model/create-core-event';\nimport { getColorAsLetter } from 'chessboard/model/game/get-color-as-letter';\nimport { isRightButton } from 'chessboard/model/dom/is-right-button';\nimport { ChessError } from 'chessboard/model/error';\nimport { ErrorCodes } from 'chessboard/model/error/types';\n\n/**\n * Handlers related to the promotion window.\n */\nexport function createPromotionWindowMethods({\n  board,\n  options,\n}: {\n  board: BoardDOM;\n  el: HTMLElement;\n  options: Board.Options;\n}) {\n  let promotionWindow: HTMLElement;\n  let closeButton: HTMLElement;\n  const pieces: { [key: string]: HTMLElement | undefined } = {\n    b: undefined,\n    n: undefined,\n    q: undefined,\n    r: undefined,\n  };\n\n  return {\n    closePromotionWindow,\n    openPromotionWindow,\n  };\n\n  /**\n   * Create the promotion window and add it to the DOM.\n   */\n  function createPromotionWindow(): void {\n    promotionWindow = document.createElement('div');\n\n    promotionWindow.classList.add('promotion-window');\n\n    if (options.test) {\n      setTestData(promotionWindow, {\n        [TestKeys.Element]: TestElements.PromotionWindow,\n      });\n    }\n\n    board.addToDom({ el: promotionWindow, type: BoardPlaceholders.PromotionWindow });\n  }\n\n  /**\n   * Create the close button and attach it to the promotion window.\n   */\n  function createCloseButton(run: Core.Run): void {\n    closeButton = document.createElement('i');\n\n    closeButton.className = 'close-button icon-font-chess x';\n\n    if (options.test) {\n      setTestData(closeButton, {\n        [TestKeys.Element]: TestElements.PromotionCloseButton,\n      });\n    }\n\n    promotionWindow.appendChild(closeButton);\n\n    closeButton.addEventListener(Pointerdown, (e) => {\n      e.stopPropagation();\n      run(createCoreEvent(Core.BoardEvents.PromotionAreaClosePointerdown));\n    });\n  }\n\n  /**\n   * Create the pieces and attach to the promotion window.\n   */\n  function createPieces(run: Core.Run): void {\n    Object.keys(pieces).forEach((pieceType) => {\n      const pieceEl = document.createElement('div');\n\n      pieceEl.addEventListener(Pointerdown, (e) => {\n        e.stopPropagation();\n\n        if (isRightButton(e)) {\n          run(createCoreEvent(Core.UserEvents.PointerdownRight));\n\n          return;\n        }\n\n        run(\n          createCoreEvent(Core.BoardEvents.PromotionPiecePointerdown, {\n            piece: pieceType,\n          }),\n        );\n      });\n\n      pieceEl.classList.add('promotion-piece');\n\n      pieces[pieceType] = pieceEl;\n\n      if (options.test) {\n        setTestData(<HTMLElement>pieces[pieceType], {\n          [TestKeys.Element]: TestElements.PromotionPiece,\n          [TestKeys.Type]: pieceType,\n        });\n      }\n\n      promotionWindow.appendChild(pieceEl);\n    });\n  }\n\n  /**\n   * Get details about the promotion window's required position and color.\n   */\n  function getPromotionWindowDetails({\n    flipped,\n    promotionMove,\n  }: {\n    flipped: boolean;\n    promotionMove: Game.Move.Model;\n  }): {\n    color: Game.ColorsAsNumbers;\n    file: number;\n    position: string;\n  } {\n    let position: string;\n\n    if (flipped) {\n      position = promotionMove.color === Game.ColorsAsNumbers.White ? 'bottom' : 'top';\n    } else {\n      position = promotionMove.color === Game.ColorsAsNumbers.White ? 'top' : 'bottom';\n    }\n\n    const color = promotionMove.color;\n\n    const files = flipped ? 'hgfedcba' : 'abcdefgh';\n\n    const file = files.indexOf(promotionMove.to.slice(0, 1)) + 1;\n\n    return {\n      color,\n      file,\n      position,\n    };\n  }\n\n  /**\n   * Open the promotion window (creates it if necessary).\n   */\n  function openPromotionWindow(promotionMove: Game.Move.Model, context: Core.Context): void {\n    const {\n      options: { flipped },\n      run,\n    } = context;\n\n    const { color, file, position } = getPromotionWindowDetails({ flipped, promotionMove });\n\n    if (!promotionWindow) {\n      createPromotionWindow();\n    }\n\n    if (!closeButton) {\n      createCloseButton(run);\n    }\n\n    if (!pieces.q) {\n      createPieces(run);\n    }\n\n    setPieceOrder(position);\n\n    setPromotionWindowFile(file);\n\n    setPieceColors(color);\n\n    if (options.test) {\n      setTestData(promotionWindow, {\n        [TestKeys.Color]: getColorAsLetter(color),\n        [TestKeys.File]: file.toString(),\n        [TestKeys.Position]: position,\n      });\n    }\n\n    showPromotionWindow();\n  }\n\n  /**\n   * Close the promotion window.\n   */\n  function closePromotionWindow(): void {\n    if (!promotionWindow) {\n      throw new ChessError({\n        code: ErrorCodes.ElementNotFound,\n        message: 'Promotion window does not exist.',\n      });\n    }\n\n    promotionWindow.style.display = 'none';\n  }\n\n  /**\n   * Set the color of the pieces.\n   */\n  function setPieceColors(color: Game.ColorsAsNumbers): void {\n    Object.keys(pieces).forEach((pieceType) => {\n      (<HTMLElement>pieces[pieceType]).className = `promotion-piece ${getColorAsLetter(\n        color,\n      )}${pieceType}`;\n\n      if (options.test) {\n        setTestData(<HTMLElement>pieces[pieceType], {\n          [TestKeys.Color]: getColorAsLetter(color),\n        });\n      }\n    });\n  }\n\n  /**\n   * Set the order of the pieces.\n   */\n  function setPieceOrder(position: string): void {\n    if (position === 'top') {\n      promotionWindow.classList.add('top');\n    } else {\n      promotionWindow.classList.remove('top');\n    }\n  }\n\n  /**\n   * Set the file of the promotion window.\n   */\n  function setPromotionWindowFile(file: number): void {\n    promotionWindow.style.transform = `translateX(${(file - 1) * 100}%`;\n  }\n\n  /**\n   * Show the promotion window.\n   */\n  function showPromotionWindow(): void {\n    promotionWindow.style.display = '';\n  }\n}\n","import type { Board } from 'chessboard/model/board/types';\nimport { createCollection } from 'utils/create-collection/create-collection';\nimport type { BoardDOM } from 'chessboard/renderers/default/board/types';\nimport { BoardPlaceholders } from 'chessboard/renderers/default/board/types';\nimport { setTestData, TestElements, TestKeys } from 'src/utils/set-test-data';\nimport { setPositionBySquare } from 'chessboard/model/board/set-position-by-square';\nimport { ChessError } from 'chessboard/model/error';\nimport { ErrorCodes } from 'chessboard/model/error/types';\nimport { createElementPool } from 'src/utils/dom/element-pool/element-pool';\nimport type {\n  KeyedBlinkingHighlight,\n  KeyedHighlight,\n} from 'chessboard/plugins/highlights/config/types';\n\nexport interface HighlightHandlers {\n  addHighlights: (highlights: KeyedHighlight[]) => void;\n  blinkHighlights: (blinkingHighlights: KeyedBlinkingHighlight[]) => void;\n  removeHighlights: (highlights: KeyedHighlight[]) => void;\n}\n\n/**\n * Handlers related to highlighted squares.\n */\nexport function createHighlightsMethods({\n  board,\n  options,\n}: {\n  board: BoardDOM;\n  options: Board.Options;\n}): HighlightHandlers {\n  const elementPool = createElementPool({\n    insertBefore: board.placeholders.squares,\n    startingCount: 3,\n  });\n  const highlightEls = createCollection<HTMLElement, Board.SanSquare>();\n  const test = options.test;\n\n  return {\n    addHighlights,\n    blinkHighlights,\n    removeHighlights,\n  };\n\n  /**\n   * Creates highlight elements and adds them to the board.\n   */\n  function addHighlights(highlights: KeyedHighlight[]): void {\n    highlights.forEach((highlight) => {\n      const { square } = highlight.data;\n\n      if (highlightEls.isDefined(square) || !highlight) {\n        return;\n      }\n\n      const highlightEl: HTMLElement = createHighlightEl(square, highlight);\n\n      highlightEls.set(square, highlightEl);\n    });\n  }\n\n  /**\n   * Blink a single highlighted square that already exists in the DOM.\n   */\n  function blinkHighlight({\n    el,\n    interval,\n    opacity,\n    times,\n  }: {\n    el: HTMLElement;\n    interval: number;\n    opacity: number;\n    times: number;\n  }) {\n    let count = 0;\n    let on = true;\n\n    const intervalVariable = setInterval(() => {\n      count += 1;\n\n      // Here we're switching both on and off, so we multiply the number\n      // of blinks by 2 to get the total number of switches.\n      if (count === times * 2) {\n        clearInterval(intervalVariable);\n\n        if (el) {\n          const parent = el.parentNode;\n\n          if (parent) {\n            parent.removeChild(el);\n          }\n        }\n\n        return;\n      }\n\n      if (!on) {\n        el.style.opacity = opacity.toString();\n\n        on = true;\n      } else {\n        el.style.opacity = '0';\n\n        on = false;\n      }\n    }, interval / 2);\n  }\n\n  /**\n   *  Blink a square.\n   */\n  function blinkHighlights(blinkingHighlights: KeyedBlinkingHighlight[]): void {\n    blinkingHighlights.forEach((blinkingHighlight) => {\n      const { color, interval, opacity, square, times } = blinkingHighlight.data;\n\n      const blinkingHighlightEl = createHighlightEl(square, blinkingHighlight);\n\n      board.addToDom({ el: blinkingHighlightEl, type: BoardPlaceholders.BlinkingHighlights });\n\n      if (test) {\n        setTestData(blinkingHighlightEl, {\n          [TestKeys.Element]: TestElements.BlinkingHighlight,\n          [TestKeys.Square]: square,\n          [TestKeys.Color]: color,\n          [TestKeys.Interval]: interval,\n          [TestKeys.Opacity]: opacity,\n          [TestKeys.Times]: times,\n          [TestKeys.Type]: TestKeys.Blinking,\n        });\n      }\n\n      blinkHighlight({\n        el: blinkingHighlightEl,\n        interval,\n        opacity,\n        times,\n      });\n    });\n  }\n\n  /**\n   * Removes highlight squares from the board.\n   */\n  function removeHighlights(squares: KeyedHighlight[]): void {\n    squares.forEach(removeHighlight);\n  }\n\n  /**\n   * Creates a move highlight element and sets the position.\n   */\n  function createHighlightEl(san: Board.SanSquare, highlight: KeyedHighlight): HTMLElement {\n    const el = elementPool.get();\n\n    setTestData(el, {\n      [TestKeys.Element]: TestElements.Highlight,\n    });\n\n    el.classList.add('highlight');\n\n    updateHighlightElementStyles(el, highlight);\n\n    setPositionBySquare({ el, square: san });\n\n    return el;\n  }\n\n  /**\n   * Removes a single move highlight from the cache and the DOM.\n   */\n  function removeHighlight(highlight: KeyedHighlight): void {\n    const { square } = highlight.data;\n\n    if (!highlightEls.isDefined(square)) {\n      return;\n    }\n\n    const highlightEl = highlightEls.get(square);\n\n    elementPool.put(highlightEl);\n\n    highlightEls.deleteItem(square);\n  }\n\n  /**\n   * Updates a single highlight square's styles if the new suware is different.\n   */\n  function updateHighlightElementStyles(el: HTMLElement, highlight: KeyedHighlight): void {\n    if (!el) {\n      throw new ChessError({\n        code: ErrorCodes.ElementNotFound,\n        data: { highlight },\n        message: 'Highlight does not exist.',\n      });\n    }\n\n    const {\n      data: { color, opacity },\n    } = highlight;\n\n    const backgroundColor = color || '';\n    const opacityStr = String(opacity);\n\n    if (el.style.backgroundColor !== backgroundColor) {\n      el.style.backgroundColor = backgroundColor;\n    }\n\n    if (el.style.opacity !== opacityStr) {\n      el.style.opacity = opacityStr;\n    }\n  }\n}\n","import type { Board } from 'chessboard/model/board/types';\n\n/**\n * Gets coordinates (percentage-based) that are bounded inside the board for\n * dragging purposes. These are relative to a piece, not the board, and are\n * directly applicable to transform translate percentages.\n */\nexport function getCoordsInsideBoard(coords: Board.Coords): Board.Coords {\n  let xInsideBoard = Math.max(coords.x, -50);\n  xInsideBoard = Math.min(xInsideBoard, 750);\n  let yInsideBoard = Math.max(coords.y, -50);\n  yInsideBoard = Math.min(yInsideBoard, 750);\n\n  return {\n    x: xInsideBoard,\n    y: yInsideBoard,\n  };\n}\n","import type { Board } from 'chessboard/model/board/types';\nimport { getSanFromFileRank } from 'chessboard/model/board/get-san-from-file-rank';\n\n/**\n * Get the square that is bounded inside the board according to a FileRank. The\n * FileRank may be outside the board, but we need to return the nearest square\n * to that FileRank.\n */\nexport function getSquareInsideBoard(file: number, rank: number): Board.SanSquare | null {\n  let fileInsideBoard = Math.max(file, 1);\n  fileInsideBoard = Math.min(fileInsideBoard, 8);\n  let rankInsideBoard = Math.max(rank, 1);\n  rankInsideBoard = Math.min(rankInsideBoard, 8);\n\n  return getSanFromFileRank({\n    file: fileInsideBoard,\n    rank: rankInsideBoard,\n  });\n}\n","import type { Board } from 'chessboard/model/board/types';\nimport { getSanFromFileRank } from 'chessboard/model/board/get-san-from-file-rank';\nimport { getCoordsInsideBoard } from 'chessboard/renderers/default/get-coords-inside-board';\nimport { getSquareInsideBoard } from 'chessboard/renderers/default/get-square-inside-board';\nimport { getXYFromEvent } from 'src/utils/get-xy-from-event';\n\n/**\n * Get a pointer position relative to the board, from a pointer event,\n * assuming a 2D board. This is the default pointer position formatter.\n */\nexport function getPointerPosition({\n  el,\n  event,\n  flipped,\n}: {\n  el: HTMLElement;\n  event: any;\n  flipped: boolean;\n}) {\n  const elRect: ClientRect = el.getBoundingClientRect();\n  const { x, y } = getXYFromEvent(event);\n\n  const squareSize = elRect.width / 8;\n\n  const coordsInsideSquare: Board.Coords = {\n    x: Math.round((x - elRect.left) % squareSize),\n    y: Math.round((y - elRect.top) % squareSize),\n  };\n\n  const nonFlippedFile = Math.ceil((x - elRect.left) / squareSize);\n  const nonFlippedRank = Math.ceil((elRect.bottom - y) / squareSize);\n\n  const file = flipped ? 9 - nonFlippedFile : nonFlippedFile;\n  const rank = flipped ? 9 - nonFlippedRank : nonFlippedRank;\n\n  const square: Board.SanSquare | null = getSanFromFileRank({\n    file,\n    rank,\n  });\n\n  const coords = <Board.Coords>{\n    x: ((x - elRect.left - squareSize / 2) / elRect.width) * 800,\n    y: ((y - elRect.top - squareSize / 2) / elRect.height) * 800,\n  };\n\n  const coordsInsideBoard = getCoordsInsideBoard(coords);\n  const squareInsideBoard = getSquareInsideBoard(file, rank);\n\n  return {\n    coords,\n    coordsInsideBoard,\n    coordsInsideSquare,\n    square,\n    squareInsideBoard,\n  };\n}\n","import { Game } from 'chessboard/model/game/types';\n\n/**\n * Gets the color as a number\n */\nexport function getColorAsNumber(color: Game.ColorsAsLetters | Game.ColorsAsWords) {\n  return color === Game.ColorsAsLetters.Black || color === Game.ColorsAsWords.Black\n    ? Game.ColorsAsNumbers.Black\n    : Game.ColorsAsNumbers.White;\n}\n","import { getSanFromFileRank } from 'model/board/get-san-from-file-rank';\nimport type { Game } from 'model/game/types';\nimport { getColorAsNumber } from 'model/game/get-color-as-number';\n\n/**\n * Format the DOM pieces as an object, for comparison with the API.\n */\nexport function formatPiecesAsObject(pieces: HTMLElement[]): Game.Piece.ConciseObject {\n  const piecesObject = {};\n\n  pieces.forEach((piece) => {\n    const classNames = piece.className.split(' ');\n\n    const squareClassName = classNames.find((className) => className.startsWith('square-'));\n    const fullShortString = classNames.find(\n      (className) => className.startsWith('w') || className.startsWith('b'),\n    );\n\n    if (!squareClassName || !fullShortString) {\n      return;\n    }\n\n    const [color, type] = fullShortString;\n\n    const file = parseInt(squareClassName[squareClassName.length - 2], 10);\n    const rank = parseInt(squareClassName[squareClassName.length - 1], 10);\n\n    const san = getSanFromFileRank({ file, rank });\n\n    if (!san) {\n      return;\n    }\n\n    piecesObject[san] = {\n      color: getColorAsNumber(<Game.ColorsAsLetters>color),\n      type,\n    };\n  });\n\n  return piecesObject;\n}\n","import 'chessboard/renderers/default/style.scss';\nimport type { CreateRenderer, RendererExtensionParams } from 'chessboard/renderers/config/types';\nimport { Renderer } from 'chessboard/renderers/config/types';\nimport { getDefaultOptions } from 'chessboard/model/board/get-default-options';\nimport { createAnalysisOverlayMethods } from 'chessboard/renderers/default/analysis-overlay';\nimport { createArrowsMethods } from 'chessboard/renderers/default/arrows';\nimport { createAssetsMethods } from 'chessboard/renderers/default/assets';\nimport { createBoard } from 'chessboard/renderers/default/board';\nimport { createCoordinatesMethods } from 'chessboard/renderers/default/coordinates';\nimport { createFadeSetupMethods } from 'chessboard/renderers/default/fade-setup';\nimport { createHoverSquareMethods } from 'chessboard/renderers/default/hover-square';\nimport { createMoveHintsMethods } from 'chessboard/renderers/default/move-hints';\nimport { createPieceMovementMethods } from 'chessboard/renderers/default/piece-movement';\nimport { createPromotionWindowMethods } from 'chessboard/renderers/default/promotion-window';\nimport { createHighlightsMethods } from 'chessboard/renderers/default/highlights';\nimport { getPointerPosition } from 'chessboard/renderers/default/get-pointer-position';\nimport { getCoordsFromSquare } from 'chessboard/renderers/default/get-coords-from-square';\nimport {\n  defaultLegacyBoardStyles,\n  defaultLegacyPieceStyles,\n} from 'chessboard/config/legacy-themes';\nimport { formatPiecesAsObject } from 'chessboard/renderers/default/format-pieces-as-object';\nimport { EventEmitterUtil } from '@chesscom/web-ui';\nimport { validateBoardOptions2D } from 'chessboard/config/theme-validation-utils';\n\nconst { createEventEmitter } = EventEmitterUtil;\n\nexport { createDefaultRenderer as createRenderer };\n\n/* eslint-disable max-params */\n/**\n * Creates a Renderer for the default HTML board.\n */\nfunction createDefaultRenderer({\n  el,\n  emitter = createEventEmitter(),\n  options = getDefaultOptions(),\n  boardStyles = defaultLegacyBoardStyles,\n  pieceStyles = defaultLegacyPieceStyles,\n  testElement,\n}: CreateRenderer.Options): Renderer.Model {\n  const board = createBoard({ el, options, testElement });\n\n  const params: RendererExtensionParams = { board, el, emitter, options };\n  const assetsMethods = createAssetsMethods({\n    ...params,\n    boardStyles,\n    pieceStyles,\n    options: validateBoardOptions2D(options),\n  });\n  const pieceMethods = createPieceMovementMethods(params);\n\n  if (board.isFlipped()) {\n    board.flipBoard(true);\n  }\n\n  assetsMethods.togglePseudo3d(options);\n\n  const methods = {\n    // Analysis overlay\n    ...createAnalysisOverlayMethods(params),\n\n    // Arrows\n    ...createArrowsMethods(params),\n\n    // Assets\n    ...assetsMethods,\n\n    // Coordinates\n    ...createCoordinatesMethods(params),\n\n    // FadeSetup\n    ...createFadeSetupMethods(params),\n\n    // Hover Square\n    ...createHoverSquareMethods(params),\n\n    // Move Hints\n    ...createMoveHintsMethods(params),\n\n    // Highlights\n    ...createHighlightsMethods(params),\n\n    // PromotionWindow\n    ...createPromotionWindowMethods(params),\n\n    // Pieces\n    ...pieceMethods,\n\n    animationComplete: board.animationComplete,\n\n    areAssetsLoaded: () => true,\n\n    createRenderer: createDefaultRenderer,\n\n    destroy,\n\n    ...emitter,\n\n    extendRenderer,\n\n    flipBoard: board.flipBoard,\n\n    setBoardEnabled: board.setBoardEnabled,\n\n    getCoordsFromSquare,\n\n    getPieces,\n\n    getPointerPosition,\n\n    getRendererOptions: () => ({\n      boardStyles,\n      el,\n      options,\n      pieceStyles,\n      emitter,\n    }),\n\n    getBoardContainerAspectRatio: () => 1,\n\n    isAnimating: board.isAnimating,\n\n    name: Renderer.Types.Default,\n\n    resize,\n  };\n\n  return methods;\n\n  /**\n   * Destroy the board.\n   */\n  function destroy() {\n    assetsMethods.destroy();\n    pieceMethods.destroy();\n    board.reset();\n  }\n\n  /**\n   * Gives a way by which the renderer may be extended\n   */\n  function extendRenderer(fn: Function) {\n    Object.assign(methods, fn(params));\n  }\n\n  /**\n   * Get the DOm pieces as an object.\n   */\n  function getPieces() {\n    const pieces: HTMLElement[] = Array.from(el.querySelectorAll('.piece'));\n\n    return formatPiecesAsObject(pieces);\n  }\n\n  /**\n   * Handle a resize call.\n   */\n  function resize() {}\n}\n","import type { Board } from 'chessboard/model/board/types';\n\n/**\n * Get the length from one point to another\n */\nexport function calculateArrowLength({\n  from,\n  to,\n}: {\n  from: Board.Coords;\n  to: Board.Coords;\n}): number {\n  return Math.sqrt((from.x - to.x) ** 2 + (from.y - to.y) ** 2);\n}\n","import { Game } from 'chessboard/model/game/types';\n\n/**\n * Gets the color as a letter, e.g. 'b', 'w'.\n */\nexport function getColorAsLetter(color: Game.ColorsAsNumbers) {\n  return color === Game.ColorsAsNumbers.Black\n    ? Game.ColorsAsLetters.Black\n    : Game.ColorsAsLetters.White;\n}\n","/**\n * Arrow styles\n */\nexport const arrowStyles = {\n  HEAD_HEIGHT: 4.5,\n  HEAD_WIDTH: 6.5,\n  TAIL_PADDING: 4.5,\n  WIDTH: 2.75,\n};\n\n/**\n * Valid length for a knight arrow\n */\nexport const KNIGHT_ARROW_LENGTH = 27.95084971874737;\n\n/**\n * Flipped knight arrows\n */\nexport const flippedKnightArrowSlopes = [0.5, -2];\n\n/**\n * Valid arrow slopes\n */\nexport const validArrowSlopes = [Infinity, 2, 1, 0.5, 0, -0.5, -1, -2, -Infinity];\n\n/**\n * Valid knight arrow slopes\n */\nexport const validKnightArrowSlopes = [2, 0.5, -0.5, -2];\n","import { PointerEvents } from 'chessboard/model/dom/get-pointer-events';\n\nexport const defaultX = -1;\nexport const defaultY = -1;\n\nlet lastX = defaultX;\nlet lastY = defaultY;\n\n/**\n * Get pure XY coordinates from event.\n * Useful because of many different devices/browsers/events.\n */\nexport function getXYFromEvent({ clientX, clientY, pointer, type, touches }: any): {\n  x: number;\n  y: number;\n} {\n  /**\n   * Since `touchend` event doesn't contain any coordinates, we need to save and get them\n   * from the previous events: `touchstart` and `touchmove`\n   */\n  const shouldTrack = type === PointerEvents.Touchmove || type === PointerEvents.Touchstart;\n  if (shouldTrack && touches.length > 0) {\n    lastX = touches[0].clientX;\n    lastY = touches[0].clientY;\n  }\n\n  if (type === PointerEvents.Touchend) {\n    return {\n      x: lastX,\n      y: lastY,\n    };\n  }\n\n  if (pointer) {\n    return {\n      x: pointer.x,\n      y: pointer.y,\n    };\n  }\n\n  if (touches && touches.length > 0) {\n    return {\n      x: touches[0].clientX,\n      y: touches[0].clientY,\n    };\n  }\n\n  return {\n    x: clientX ?? defaultX,\n    y: clientY ?? defaultY,\n  };\n}\n","import { getAssetBasePath } from 'src/utils/get-asset-base-path';\nimport type { Board } from 'chessboard/model/board/types';\n\n/**\n * Get the board URL.\n * Based on the expected path when board assets were hardcoded in chessboard\n */\nexport function getLegacyBoardURL(\n  boardStylePath: string,\n  size: number = 150,\n  options?: Board.Options,\n) {\n  return `${getAssetBasePath(options)}/boards/${boardStylePath}/${size}.png`;\n}\n"],"names":["calculateArrowSlope","from","to","slope","y","x","roundedSlope","Number","toFixed","getFileRankFromSan","san","file","toLowerCase","charCodeAt","rank","charAt","getKnightArrowRotation","getSanFromFileRank","fileRank","String","fromCharCode","toString","setTestData","el","keyVals","Object","entries","forEach","key","val","capitalizedKey","toUpperCase","slice","dataset","TestKeys","TestKeys2","TestElements","TestElements2","calculateArrowRotation","length","calculateArrowLength","originalTo","vector1","vector2","cosine","clampedCosine","Math","max","min","radians","acos","degrees","floor","PI","getArrowColor","color","colorOptions","Game","Node","Marking","JCEColorsMap","default","tuckMarking","square","isFlipped","effectEl","tuckPosition","getTuckPosition","top","classList","add","right","sides","includes","getUndoMoveDetails","move","movedPieces","animate","nodeTargetSquare","rookMove","push","restoredPiece","captured","capturedStr","getOppositeColor","promoted","capturedPromotedPawn","EPCapturedSquare","type","promotedSquare","promotion","createAnalysisOverlayMethods","board","addAnalysisOverlay","removeAnalysisOverlay","remove","BoardPlaceholders","BoardPlaceholders2","squareCoordinates","a1","a2","a3","a4","a5","a6","a7","a8","b1","b2","b3","b4","b5","b6","b7","b8","c1","c2","c3","c4","c5","c6","c7","c8","d1","d2","d3","d4","d5","d6","d7","d8","e1","e2","e3","e4","e5","e6","e7","e8","f1","f2","f3","f4","f5","f6","f7","f8","g1","g2","g3","g4","g5","g6","g7","g8","h1","h2","h3","h4","h5","h6","h7","h8","halfArrowWidth","arrowStyles","WIDTH","arrowHeadHeight","HEAD_HEIGHT","tailPadding","TAIL_PADDING","halfArrowHeadWidth","HEAD_WIDTH","getStraightArrowPoints","trim","createStraightArrow","polygon","arrowRotation","setAttribute","getKnightArrowPoints","createKnightArrow","transform","flippedKnightArrowSlopes","createArrow","arrow","context","fromSan","opacity","toSan","data","document","createElementNS","arrowColors","options","style","fill","validKnightArrowSlopes","KNIGHT_ARROW_LENGTH","createArrowsMethods","svg","addToDom","Arrows","arrowElements","Map","addArrows","removeArrows","arrows","arrowToAdd","appendChild","set","arrowEl","get","removeChild","delete","TRANSITION_DURATION_MS","TRANSITION_STYLE","createStyleDOM","boardStyles","pieceStyles","updateStyles","destroy","getStyleEl","getPieceStyles","styleEl","getElementById","getStyleId","parentNode","useSharedStyleTag","id","getLegacyStyleInnerHTML","opts","fallback","boardStyle","pieceStyle","path","format","isPseudo3d","defaultLegacyPieceStyles","neo","pieceBaseUrl","getLegacyPieceBaseURL","boardTheme","defaultLegacyBoardStyles","green","pseudoElement","pieceStylesString","shortPieceNames","reduce","acc","shortString","defaultPiecesBase64","boardStylesString","getLegacyBoardURL","transitionStyles","getStyleInnerHTML","themeAssets","config","perspective","ThemeAssets","Perspective","PSEUDO_3D","keys","pieces","assets","pieceString","background","lightSquareCoordinateHex","darkSquareCoordinateHex","highlightSquareHex","styleId","createElement","head","themeStyles","innerHTML","setTimeout","replace","boardOptions","result","Boolean","createAssetsMethods","styleDOM","updateBoardImage","updatePieceBaseImage","togglePseudo3d","validateBoardOptions2D","showClass","toggle","BoardClasses","Pseudo3d","createExternallyResolvablePromise","res","rej","promise","Promise","resolve","reject","isEdgeSquare","edgeValues","isEdge","value","createBoard","testElement","Board","placeholders","Coordinates","createComment","Squares","BlinkingHighlights","Effects","HoverSquare","Pieces","MoveHints","CaptureHints","PromotionWindow","FadeSetup","values","placeholder","animationCompleteResolvablePromise","_a","call","test","Element","animationComplete","flipBoard","setBoardEnabled","isAnimating","setAnimatingStatus","reset","element","insertAfter","insertBefore","nextSibling","shouldFlip","Flipped","allowMarkings","effects","api","markings","getAllWhere","types","EffectType","updateTuckedEffects","renderer","effect","_a2","getEffectElements","effEl","contains","testAnimating","animationType","AnimationTypes","All","Move","flipped","isInAnimatingState","getTextChar","text","reverse","getCoordinates","position","CoordinatesPositions","Outside","fontSize","getTextNodes","coordinates","map","coordinate","ndx","coord","join","createCoordinatesMethods","setCoordinates","addCoordinates","boardIsFlipped","createCoordinates","removeCoordinates","Off","coordinatesEl","querySelector","Position","createFadeSetupMethods","fadeInOverlay","fadeSetup","createFadeInOverlay","addEventListener","removeAnimation","FadeInOverlay","animationDuration","removeFadeInOverlay","removeClassNamesStartingWith","className","str","split","filter","name","startsWith","setPositionBySquare","createHoverSquareMethods","hoverSquareEl","createHoverSquareEl","hoveredSquare","hideHoverSquare","showHoverSquare","visibility","append","createMoveHintsMethods","hints","addCaptureHints","addMoveHints","removeHints","squares","createHintFromSquare","removeHint","isPotentialCapture","borderWidth","clientWidth","PotentialCapture","Hint","parent","createCheckBlinkingHighlight","interval","times","HighlightType","AnimationTypes2","generateFadeOutSteps","animation","numSteps","Array","_","arr","callback","stepPercentage","getAbsoluteFileRankFromSan","getCoordsFromSquare","absoluteFileRank","generateSlideSteps","fromCoords","toCoords","xStep","yStep","isLastStep","coords","zIndex","FRAME_LENGTH_MS","createAnimations","steps","generateSteps","FadeOut","Slide","flush","run","animations","getDuration","animationsSteps","fillerArray","unshift","step","ndxFromEnd","splice","nextStep","shift","prop","requestAnimationFrame","Animation","Types","Slow","Speeds","Fast","None","Default","createElementPool","appendTo","elementType","startingCount","ChessError","code","ErrorCodes","BadData","message","pool","hideElement","put","pop","showElement","cssText","PieceEvents","PieceEvents2","createPiece","details","emitter","piece","emit","Created","setDetails","setPositionBySquare$1","Piece","getDetails","setDraggingState","setPositionByCoords","generateShortString","getColorAsLetter","DetailsSet","Type","Color","ShortString","ColorsAsNumbers","Black","drag","DragStarted","Dragging","DragEnded","suspend","File","Rank","Square","PositionSetBySquare","createPieces","elementPool","draggingSquare","createCollection","create","getDraggingSquare","suspendOverSquare","pieceToCreate","PieceShown","shouldThrow","isDefined","ElementNotFound","moves","gameMoves","isArray","gameToMoves","gameMove","moveFromPieces","anims","squareTo","deleteItem","removeElement","PieceHidden","currentDraggingSquare","createPieceMovementMethods","dragPiece","dropPiece","illegalMove","loadPieces","makeMove","removePiece","undoMove","p","toSquare","kingInCheck","blinkHighlights","checkBlinkingSquareColor","drop","isCastle","params","piecesToLoad","squaresToLoad","unneeded","pieceToLoad","promotedPiece","Pawn","createPromotionWindowMethods","promotionWindow","closeButton","b","n","q","r","closePromotionWindow","openPromotionWindow","createPromotionWindow","createCloseButton","PromotionCloseButton","Pointerdown","e","stopPropagation","createCoreEvent","Core","BoardEvents","PromotionAreaClosePointerdown","pieceType","pieceEl","isRightButton","UserEvents","PointerdownRight","PromotionPiecePointerdown","PromotionPiece","getPromotionWindowDetails","promotionMove","White","files","indexOf","setPieceOrder","setPromotionWindowFile","setPieceColors","showPromotionWindow","display","createHighlightsMethods","highlightEls","addHighlights","removeHighlights","highlights","highlight","highlightEl","createHighlightEl","blinkHighlight","count","on","intervalVariable","setInterval","clearInterval","blinkingHighlights","blinkingHighlight","blinkingHighlightEl","BlinkingHighlight","Interval","Opacity","Times","Blinking","removeHighlight","Highlight","updateHighlightElementStyles","backgroundColor","opacityStr","getCoordsInsideBoard","xInsideBoard","yInsideBoard","getSquareInsideBoard","fileInsideBoard","rankInsideBoard","getPointerPosition","event","elRect","getBoundingClientRect","getXYFromEvent","squareSize","width","coordsInsideSquare","round","left","nonFlippedFile","ceil","nonFlippedRank","bottom","height","coordsInsideBoard","squareInsideBoard","getColorAsNumber","ColorsAsLetters","ColorsAsWords","formatPiecesAsObject","piecesObject","classNames","squareClassName","find","fullShortString","parseInt","createEventEmitter","index$e","createDefaultRenderer","getDefaultOptions","assetsMethods","pieceMethods","methods","areAssetsLoaded","createRenderer","extendRenderer","getPieces","getRendererOptions","getBoardContainerAspectRatio","Renderer","resize","fn","assign","querySelectorAll","sqrt","defaultX","defaultY","lastX","lastY","clientX","clientY","pointer","touches","shouldTrack","PointerEvents","Touchmove","Touchstart","Touchend","boardStylePath","size","getAssetBasePath"],"sourceRoot":""}